{"ast":null,"code":"var _jsxFileName = \"/Users/smartleet/Desktop/Openai_RealtimeAPI_Voice_Console/src/pages/ConsolePage.tsx\",\n  _s = $RefreshSig$();\n/**\r\n * Running a local relay server will allow you to hide your API key\r\n * and run custom logic on the server\r\n *\r\n * Set the local relay server address to:\r\n * REACT_APP_LOCAL_RELAY_SERVER_URL=http://localhost:8081\r\n *\r\n * This will also require you to set OPENAI_API_KEY= in a `.env` file\r\n * You can run it with `npm run relay`, in parallel with `npm start`\r\n */\n\nimport { useEffect, useRef, useCallback, useState } from 'react';\nimport { RealtimeClient } from '@openai/realtime-api-beta';\nimport { WavRecorder, WavStreamPlayer } from '../lib/wavtools/index.js';\nimport { instructions } from '../utils/conversation_config.js';\nimport { WavRenderer } from '../utils/wav_renderer';\nimport { X, Edit, Zap } from 'react-feather';\nimport { Button } from '../components/button/Button';\nimport './ConsolePage.scss';\nimport { SimliClient } from 'simli-client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LOCAL_RELAY_SERVER_URL = process.env.REACT_APP_LOCAL_RELAY_SERVER_URL || '';\n\n/**\r\n * Type for result from get_weather() function call\r\n */\n\n/**\r\n * Type for all event logs\r\n */\n\nfunction resampleAudioData(inputData, inputSampleRate, outputSampleRate) {\n  const sampleRateRatio = inputSampleRate / outputSampleRate;\n  const outputLength = Math.round(inputData.length / sampleRateRatio);\n  const outputData = new Int16Array(outputLength);\n  for (let i = 0; i < outputLength; i++) {\n    const sourceIndex = i * sampleRateRatio;\n    const lowerIndex = Math.floor(sourceIndex);\n    const upperIndex = Math.min(lowerIndex + 1, inputData.length - 1);\n    const interpolation = sourceIndex - lowerIndex;\n    outputData[i] = (1 - interpolation) * inputData[lowerIndex] + interpolation * inputData[upperIndex];\n  }\n  return outputData;\n}\nexport function ConsolePage() {\n  _s();\n  /**\r\n   * Ask user for API Key\r\n   * If we're using the local relay server, we don't need this\r\n   */\n  const apiKey = LOCAL_RELAY_SERVER_URL ? '' : localStorage.getItem('tmp::voice_api_key') || prompt('OpenAI API Key') || '';\n  if (apiKey !== '') {\n    localStorage.setItem('tmp::voice_api_key', apiKey);\n  }\n\n  /**\r\n   * Instantiate:\r\n   * - WavRecorder (speech input)\r\n   * - WavStreamPlayer (speech output)\r\n   * - RealtimeClient (API client)\r\n   */\n  const [showEvents, setShowEvents] = useState(false);\n  const [showConversations, setShowConversations] = useState(false);\n  const videoRef = useRef(null);\n  const audioRef = useRef(null);\n  const simliClientRef = useRef(null);\n  const simliAudioBufferRef = useRef([]);\n  const wavRecorderRef = useRef(new WavRecorder({\n    sampleRate: 24000\n  }));\n  const wavStreamPlayerRef = useRef(new WavStreamPlayer({\n    sampleRate: 24000\n  }));\n  const clientRef = useRef(new RealtimeClient(LOCAL_RELAY_SERVER_URL ? {\n    url: LOCAL_RELAY_SERVER_URL\n  } : {\n    apiKey: apiKey,\n    dangerouslyAllowAPIKeyInBrowser: true\n  }));\n\n  /**\r\n   * References for\r\n   * - Rendering audio visualization (canvas)\r\n   * - Autoscrolling event logs\r\n   * - Timing delta for event log displays\r\n   */\n  const clientCanvasRef = useRef(null);\n  const serverCanvasRef = useRef(null);\n  const eventsScrollHeightRef = useRef(0);\n  const eventsScrollRef = useRef(null);\n  const startTimeRef = useRef(new Date().toISOString());\n\n  /**\r\n   * All of our variables for displaying application state\r\n   * - items are all conversation items (dialog)\r\n   * - realtimeEvents are event logs, which can be expanded\r\n   * - memoryKv is for set_memory() function\r\n   * - coords, marker are for get_weather() function\r\n   */\n  const [items, setItems] = useState([]);\n  const [realtimeEvents, setRealtimeEvents] = useState([]);\n  const [expandedEvents, setExpandedEvents] = useState({});\n  const [isConnected, setIsConnected] = useState(false);\n  const [canPushToTalk, setCanPushToTalk] = useState(true);\n  const [isRecording, setIsRecording] = useState(false);\n  const [memoryKv, setMemoryKv] = useState({});\n  const [coords, setCoords] = useState({\n    lat: 37.775593,\n    lng: -122.418137\n  });\n  const [marker, setMarker] = useState(null);\n\n  /**\r\n   * Utility for formatting the timing of logs\r\n   */\n  const formatTime = useCallback(timestamp => {\n    const startTime = startTimeRef.current;\n    const t0 = new Date(startTime).valueOf();\n    const t1 = new Date(timestamp).valueOf();\n    const delta = t1 - t0;\n    const hs = Math.floor(delta / 10) % 100;\n    const s = Math.floor(delta / 1000) % 60;\n    const m = Math.floor(delta / 60000) % 60;\n    const pad = n => {\n      let s = n + '';\n      while (s.length < 2) {\n        s = '0' + s;\n      }\n      return s;\n    };\n    return `${pad(m)}:${pad(s)}.${pad(hs)}`;\n  }, []);\n\n  /**\r\n   * When you click the API key\r\n   */\n  const resetAPIKey = useCallback(() => {\n    const apiKey = prompt('OpenAI API Key');\n    if (apiKey !== null) {\n      localStorage.clear();\n      localStorage.setItem('tmp::voice_api_key', apiKey);\n      window.location.reload();\n    }\n  }, []);\n\n  /**\r\n   * Connect to conversation:\r\n   * WavRecorder taks speech input, WavStreamPlayer output, client is API client\r\n   */\n  const connectConversation = useCallback(async () => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n\n    // Set state variables\n    startTimeRef.current = new Date().toISOString();\n    setIsConnected(true);\n    setRealtimeEvents([]);\n    setItems(client.conversation.getItems());\n\n    // Connect to microphone\n    await wavRecorder.begin();\n\n    // Connect to audio output\n    await wavStreamPlayer.connect();\n\n    // Connect to realtime API\n    await client.connect();\n    client.sendUserMessageContent([{\n      type: `input_text`,\n      text: `Hello!`\n      // text: `For testing purposes, I want you to list ten car brands. Number each item, e.g. \"one (or whatever number you are one): the item name\".`\n    }]);\n    if (client.getTurnDetectionType() === 'server_vad') {\n      await wavRecorder.record(data => client.appendInputAudio(data.mono));\n    }\n  }, []);\n\n  /**\r\n   * Disconnect and reset conversation state\r\n   */\n  const disconnectConversation = useCallback(async () => {\n    setIsConnected(false);\n    setRealtimeEvents([]);\n    setItems([]);\n    setMemoryKv({});\n    setCoords({\n      lat: 37.775593,\n      lng: -122.418137\n    });\n    setMarker(null);\n    const client = clientRef.current;\n    client.disconnect();\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.end();\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    await wavStreamPlayer.interrupt();\n  }, []);\n  const deleteConversationItem = useCallback(async id => {\n    const client = clientRef.current;\n    client.deleteItem(id);\n  }, []);\n  const [isSimliReady, setIsSimliReady] = useState(false);\n\n  // In your useEffect where you initialize SimliClient\n  useEffect(() => {\n    if (simliClientRef.current) {\n      simliClientRef.current.on('connected', () => {\n        setIsSimliReady(true);\n      });\n      simliClientRef.current.on('disconnected', () => {\n        setIsSimliReady(false);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    // Get refs\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const client = clientRef.current;\n\n    // Initialize SimliClient\n    if (videoRef.current && audioRef.current) {\n      const simliApiKey = '7u9k31cjc3350xyfo8tvfq';\n      const simliFaceID = 'f7d80f58-d631-4b90-b12f-298b76a72751';\n      if (!simliApiKey || !simliFaceID) {\n        console.error('Simli API key or Face ID is not defined');\n      } else {\n        simliClientRef.current = new SimliClient();\n        simliClientRef.current.Initialize({\n          apiKey: simliApiKey,\n          faceID: simliFaceID,\n          handleSilence: true,\n          videoRef: videoRef,\n          audioRef: audioRef\n        });\n        console.log('Simli Client initialized');\n      }\n    }\n\n    // Set instructions\n    client.updateSession({\n      instructions: instructions\n    });\n    // Set transcription, otherwise we don't get user transcriptions back\n    client.updateSession({\n      input_audio_transcription: {\n        model: 'whisper-1'\n      }\n    });\n\n    // Handle realtime events from client + server for event logging\n    // ... rest of your event handlers ...\n\n    return () => {\n      // Cleanup\n      client.reset();\n\n      // Close SimliClient on unmount\n      if (simliClientRef.current) {\n        simliClientRef.current.close();\n      }\n    };\n  }, []);\n  const isSimliDataChannelOpen = () => {\n    if (!simliClientRef.current) return false;\n\n    // Access internal properties (may vary depending on SimliClient implementation)\n    const pc = simliClientRef.current.pc;\n    const dc = simliClientRef.current.dc;\n    return pc !== null && pc.iceConnectionState === 'connected' && dc !== null && dc.readyState === 'open';\n  };\n\n  /**\r\n   * In push-to-talk mode, start recording\r\n   * .appendInputAudio() for each sample\r\n   */\n  const startRecording = async () => {\n    setIsRecording(true);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const trackSampleOffset = await wavStreamPlayer.interrupt();\n    if (trackSampleOffset !== null && trackSampleOffset !== void 0 && trackSampleOffset.trackId) {\n      const {\n        trackId,\n        offset\n      } = trackSampleOffset;\n      await client.cancelResponse(trackId, offset);\n    }\n    await wavRecorder.record(data => client.appendInputAudio(data.mono));\n  };\n\n  /**\r\n   * In push-to-talk mode, stop recording\r\n   */\n  const stopRecording = async () => {\n    setIsRecording(false);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.pause();\n    client.createResponse();\n  };\n\n  /**\r\n   * Switch between Manual <> VAD mode for communication\r\n   */\n  const changeTurnEndType = async value => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    if (value === 'none' && wavRecorder.getStatus() === 'recording') {\n      await wavRecorder.pause();\n    }\n    client.updateSession({\n      turn_detection: value === 'none' ? null : {\n        type: 'server_vad'\n      }\n    });\n    if (value === 'server_vad' && client.isConnected()) {\n      await wavRecorder.record(data => client.appendInputAudio(data.mono));\n    }\n    setCanPushToTalk(value === 'none');\n  };\n\n  /**\r\n   * Auto-scroll the event logs\r\n   */\n  useEffect(() => {\n    changeTurnEndType('server_vad');\n  }, []);\n  useEffect(() => {\n    if (eventsScrollRef.current) {\n      const eventsEl = eventsScrollRef.current;\n      const scrollHeight = eventsEl.scrollHeight;\n      // Only scroll if height has just changed\n      if (scrollHeight !== eventsScrollHeightRef.current) {\n        eventsEl.scrollTop = scrollHeight;\n        eventsScrollHeightRef.current = scrollHeight;\n      }\n    }\n  }, [realtimeEvents]);\n\n  /**\r\n   * Auto-scroll the conversation logs\r\n   */\n  useEffect(() => {\n    const conversationEls = [].slice.call(document.body.querySelectorAll('[data-conversation-content]'));\n    for (const el of conversationEls) {\n      const conversationEl = el;\n      conversationEl.scrollTop = conversationEl.scrollHeight;\n    }\n  }, [items]);\n\n  /**\r\n   * Set up render loops for the visualization canvas\r\n   */\n  useEffect(() => {\n    let isLoaded = true;\n    const wavRecorder = wavRecorderRef.current;\n    const clientCanvas = clientCanvasRef.current;\n    let clientCtx = null;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const serverCanvas = serverCanvasRef.current;\n    let serverCtx = null;\n    const render = () => {\n      if (isLoaded) {\n        if (clientCanvas) {\n          if (!clientCanvas.width || !clientCanvas.height) {\n            clientCanvas.width = clientCanvas.offsetWidth;\n            clientCanvas.height = clientCanvas.offsetHeight;\n          }\n          clientCtx = clientCtx || clientCanvas.getContext('2d');\n          if (clientCtx) {\n            clientCtx.clearRect(0, 0, clientCanvas.width, clientCanvas.height);\n            const result = wavRecorder.recording ? wavRecorder.getFrequencies('voice') : {\n              values: new Float32Array([0])\n            };\n            WavRenderer.drawBars(clientCanvas, clientCtx, result.values, '#fcc909', 10, 0, 8);\n          }\n        }\n        if (serverCanvas) {\n          if (!serverCanvas.width || !serverCanvas.height) {\n            serverCanvas.width = serverCanvas.offsetWidth;\n            serverCanvas.height = serverCanvas.offsetHeight;\n          }\n          serverCtx = serverCtx || serverCanvas.getContext('2d');\n          if (serverCtx) {\n            serverCtx.clearRect(0, 0, serverCanvas.width, serverCanvas.height);\n            const result = wavStreamPlayer.analyser ? wavStreamPlayer.getFrequencies('voice') : {\n              values: new Float32Array([0])\n            };\n            WavRenderer.drawBars(serverCanvas, serverCtx, result.values, '#8d8d8d', 10, 0, 8);\n          }\n        }\n        window.requestAnimationFrame(render);\n      }\n    };\n    render();\n    return () => {\n      isLoaded = false;\n    };\n  }, []);\n\n  /**\r\n   * Core RealtimeClient and audio capture setup\r\n   * Set all of our instructions, tools, events and more\r\n   */\n  useEffect(() => {\n    // Get refs\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const client = clientRef.current;\n\n    // Set instructions\n    client.updateSession({\n      instructions: instructions\n    });\n    // Set transcription, otherwise we don't get user transcriptions back\n    client.updateSession({\n      input_audio_transcription: {\n        model: 'whisper-1'\n      }\n    });\n\n    // handle realtime events from client + server for event logging\n    client.on('realtime.event', realtimeEvent => {\n      setRealtimeEvents(realtimeEvents => {\n        const lastEvent = realtimeEvents[realtimeEvents.length - 1];\n        if ((lastEvent === null || lastEvent === void 0 ? void 0 : lastEvent.event.type) === realtimeEvent.event.type) {\n          // if we receive multiple events in a row, aggregate them for display purposes\n          lastEvent.count = (lastEvent.count || 0) + 1;\n          return realtimeEvents.slice(0, -1).concat(lastEvent);\n        } else {\n          return realtimeEvents.concat(realtimeEvent);\n        }\n      });\n    });\n    client.on('error', event => console.error(event));\n    client.on('conversation.interrupted', async () => {\n      const trackSampleOffset = await wavStreamPlayer.interrupt();\n      if (trackSampleOffset !== null && trackSampleOffset !== void 0 && trackSampleOffset.trackId) {\n        const {\n          trackId,\n          offset\n        } = trackSampleOffset;\n        await client.cancelResponse(trackId, offset);\n      }\n    });\n    client.on('conversation.updated', async ({\n      item,\n      delta\n    }) => {\n      var _item$formatted$audio;\n      const items = client.conversation.getItems();\n      if (delta !== null && delta !== void 0 && delta.audio) {\n        if (simliClientRef.current) {\n          const audioData = new Int16Array(delta.audio);\n          const resampledAudioData = resampleAudioData(audioData, 24000, 16000);\n          if (isSimliDataChannelOpen()) {\n            // Send buffered audio first\n            if (simliAudioBufferRef.current.length > 0) {\n              simliAudioBufferRef.current.forEach(bufferedData => {\n                simliClientRef.current.sendAudioData(bufferedData);\n              });\n              simliAudioBufferRef.current = [];\n            }\n            // Send current resampled audio data\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\n            simliClientRef.current.sendAudioData(resampledAudioDataUint8);\n          } else {\n            // Buffer the resampled audio data\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\n            simliAudioBufferRef.current.push(resampledAudioDataUint8);\n            console.warn('Data channel is not open yet, buffering audio data');\n          }\n        }\n      }\n      if (item.status === 'completed' && (_item$formatted$audio = item.formatted.audio) !== null && _item$formatted$audio !== void 0 && _item$formatted$audio.length) {\n        const wavFile = await WavRecorder.decode(item.formatted.audio, 24000, 24000);\n        item.formatted.file = wavFile;\n      }\n      setItems(items);\n    });\n    setItems(client.conversation.getItems());\n    return () => {\n      // cleanup; resets to defaults\n      client.reset();\n    };\n  }, []);\n\n  /**\r\n   * Render the application\r\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-component\": \"ConsolePage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-top\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-title\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://www.enabel.be/app/uploads/2022/06/enabel-logo-color.svg\",\n          alt: \"Enabel Logo\",\n          style: {\n            width: '130px',\n            height: '30px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-api-key\",\n        children: !LOCAL_RELAY_SERVER_URL && /*#__PURE__*/_jsxDEV(Button, {\n          icon: Edit,\n          iconPosition: \"end\",\n          buttonStyle: \"flush\",\n          label: `api key: ${apiKey.slice(0, 3)}...`,\n          onClick: () => resetAPIKey()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-logs\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-block events\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"video\", {\n              ref: videoRef,\n              autoPlay: true,\n              playsInline: true,\n              muted: true,\n              className: \"video-background\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n              ref: audioRef,\n              autoPlay: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-block conversation\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-body\",\n            \"data-conversation-content\": true,\n            children: showConversations && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [!items.length && `awaiting connection...`, items.map((conversationItem, i) => {\n                var _conversationItem$for;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"conversation-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `speaker ${conversationItem.role || ''}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: (conversationItem.role || conversationItem.type).replaceAll('_', ' ')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 686,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"close\",\n                      onClick: () => deleteConversationItem(conversationItem.id),\n                      children: /*#__PURE__*/_jsxDEV(X, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 697,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 691,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 685,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `speaker-content`,\n                    children: [conversationItem.type === 'function_call_output' && /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: conversationItem.formatted.output\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 703,\n                      columnNumber: 29\n                    }, this), !!conversationItem.formatted.tool && /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [conversationItem.formatted.tool.name, \"(\", conversationItem.formatted.tool.arguments, \")\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 707,\n                      columnNumber: 29\n                    }, this), !conversationItem.formatted.tool && conversationItem.role === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: conversationItem.formatted.transcript || ((_conversationItem$for = conversationItem.formatted.audio) !== null && _conversationItem$for !== void 0 && _conversationItem$for.length ? '(awaiting transcript)' : conversationItem.formatted.text || '(item sent)')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 714,\n                      columnNumber: 31\n                    }, this), !conversationItem.formatted.tool && conversationItem.role === 'assistant' && /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: conversationItem.formatted.transcript || conversationItem.formatted.text || '(truncated)'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 724,\n                      columnNumber: 31\n                    }, this), conversationItem.formatted.file && /*#__PURE__*/_jsxDEV(\"audio\", {\n                      src: conversationItem.formatted.file.url,\n                      controls: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 731,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 700,\n                    columnNumber: 25\n                  }, this)]\n                }, conversationItem.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 684,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-actions\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            label: isConnected ? 'disconnect' : 'connect',\n            iconPosition: isConnected ? 'end' : 'start',\n            icon: isConnected ? X : Zap,\n            buttonStyle: isConnected ? 'regular' : 'action',\n            onClick: isConnected ? disconnectConversation : connectConversation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 576,\n    columnNumber: 5\n  }, this);\n}\n_s(ConsolePage, \"vVglMc1B3xpm9np+Z4SA3cONrj4=\");\n_c = ConsolePage;\nvar _c;\n$RefreshReg$(_c, \"ConsolePage\");","map":{"version":3,"names":["useEffect","useRef","useCallback","useState","RealtimeClient","WavRecorder","WavStreamPlayer","instructions","WavRenderer","X","Edit","Zap","Button","SimliClient","jsxDEV","_jsxDEV","Fragment","_Fragment","LOCAL_RELAY_SERVER_URL","process","env","REACT_APP_LOCAL_RELAY_SERVER_URL","resampleAudioData","inputData","inputSampleRate","outputSampleRate","sampleRateRatio","outputLength","Math","round","length","outputData","Int16Array","i","sourceIndex","lowerIndex","floor","upperIndex","min","interpolation","ConsolePage","_s","apiKey","localStorage","getItem","prompt","setItem","showEvents","setShowEvents","showConversations","setShowConversations","videoRef","audioRef","simliClientRef","simliAudioBufferRef","wavRecorderRef","sampleRate","wavStreamPlayerRef","clientRef","url","dangerouslyAllowAPIKeyInBrowser","clientCanvasRef","serverCanvasRef","eventsScrollHeightRef","eventsScrollRef","startTimeRef","Date","toISOString","items","setItems","realtimeEvents","setRealtimeEvents","expandedEvents","setExpandedEvents","isConnected","setIsConnected","canPushToTalk","setCanPushToTalk","isRecording","setIsRecording","memoryKv","setMemoryKv","coords","setCoords","lat","lng","marker","setMarker","formatTime","timestamp","startTime","current","t0","valueOf","t1","delta","hs","s","m","pad","n","resetAPIKey","clear","window","location","reload","connectConversation","client","wavRecorder","wavStreamPlayer","conversation","getItems","begin","connect","sendUserMessageContent","type","text","getTurnDetectionType","record","data","appendInputAudio","mono","disconnectConversation","disconnect","end","interrupt","deleteConversationItem","id","deleteItem","isSimliReady","setIsSimliReady","on","simliApiKey","simliFaceID","console","error","Initialize","faceID","handleSilence","log","updateSession","input_audio_transcription","model","reset","close","isSimliDataChannelOpen","pc","dc","iceConnectionState","readyState","startRecording","trackSampleOffset","trackId","offset","cancelResponse","stopRecording","pause","createResponse","changeTurnEndType","value","getStatus","turn_detection","eventsEl","scrollHeight","scrollTop","conversationEls","slice","call","document","body","querySelectorAll","el","conversationEl","isLoaded","clientCanvas","clientCtx","serverCanvas","serverCtx","render","width","height","offsetWidth","offsetHeight","getContext","clearRect","result","recording","getFrequencies","values","Float32Array","drawBars","analyser","requestAnimationFrame","realtimeEvent","lastEvent","event","count","concat","item","_item$formatted$audio","audio","audioData","resampledAudioData","forEach","bufferedData","sendAudioData","resampledAudioDataUint8","Uint8Array","buffer","push","warn","status","formatted","wavFile","decode","file","children","className","src","alt","style","fileName","_jsxFileName","lineNumber","columnNumber","icon","iconPosition","buttonStyle","label","onClick","ref","autoPlay","playsInline","muted","map","conversationItem","_conversationItem$for","role","replaceAll","output","tool","name","arguments","transcript","controls","_c","$RefreshReg$"],"sources":["/Users/smartleet/Desktop/Openai_RealtimeAPI_Voice_Console/src/pages/ConsolePage.tsx"],"sourcesContent":["/**\r\n * Running a local relay server will allow you to hide your API key\r\n * and run custom logic on the server\r\n *\r\n * Set the local relay server address to:\r\n * REACT_APP_LOCAL_RELAY_SERVER_URL=http://localhost:8081\r\n *\r\n * This will also require you to set OPENAI_API_KEY= in a `.env` file\r\n * You can run it with `npm run relay`, in parallel with `npm start`\r\n */\r\n\r\nimport { useEffect, useRef, useCallback, useState } from 'react';\r\n\r\nimport { RealtimeClient } from '@openai/realtime-api-beta';\r\nimport { ItemType } from '@openai/realtime-api-beta/dist/lib/client.js';\r\nimport { WavRecorder, WavStreamPlayer } from '../lib/wavtools/index.js';\r\nimport { instructions } from '../utils/conversation_config.js';\r\nimport { WavRenderer } from '../utils/wav_renderer';\r\n\r\nimport { X, Edit, Zap, ArrowUp, ArrowDown } from 'react-feather';\r\nimport { Button } from '../components/button/Button';\r\nimport { Toggle } from '../components/toggle/Toggle';\r\nimport { Map } from '../components/Map';\r\n\r\nimport './ConsolePage.scss';\r\nimport { isJsxOpeningLikeElement } from 'typescript';\r\nimport { SimliClient } from 'simli-client';\r\n\r\nconst LOCAL_RELAY_SERVER_URL: string =\r\n  process.env.REACT_APP_LOCAL_RELAY_SERVER_URL || '';\r\n\r\n\r\n/**\r\n * Type for result from get_weather() function call\r\n */\r\ninterface Coordinates {\r\n  lat: number;\r\n  lng: number;\r\n  location?: string;\r\n  temperature?: {\r\n    value: number;\r\n    units: string;\r\n  };\r\n  wind_speed?: {\r\n    value: number;\r\n    units: string;\r\n  };\r\n}\r\n\r\n/**\r\n * Type for all event logs\r\n */\r\ninterface RealtimeEvent {\r\n  time: string;\r\n  source: 'client' | 'server';\r\n  count?: number;\r\n  event: { [key: string]: any };\r\n}\r\n\r\nfunction resampleAudioData(\r\n  inputData: Int16Array,\r\n  inputSampleRate: number,\r\n  outputSampleRate: number\r\n): Int16Array {\r\n  const sampleRateRatio = inputSampleRate / outputSampleRate;\r\n  const outputLength = Math.round(inputData.length / sampleRateRatio);\r\n  const outputData = new Int16Array(outputLength);\r\n\r\n  for (let i = 0; i < outputLength; i++) {\r\n    const sourceIndex = i * sampleRateRatio;\r\n    const lowerIndex = Math.floor(sourceIndex);\r\n    const upperIndex = Math.min(lowerIndex + 1, inputData.length - 1);\r\n    const interpolation = sourceIndex - lowerIndex;\r\n    outputData[i] =\r\n      (1 - interpolation) * inputData[lowerIndex] +\r\n      interpolation * inputData[upperIndex];\r\n  }\r\n\r\n  return outputData;\r\n}\r\n\r\n\r\n\r\nexport function ConsolePage() {\r\n  /**\r\n   * Ask user for API Key\r\n   * If we're using the local relay server, we don't need this\r\n   */\r\n  const apiKey = LOCAL_RELAY_SERVER_URL\r\n    ? ''\r\n    : localStorage.getItem('tmp::voice_api_key') ||\r\n    prompt('OpenAI API Key') ||\r\n    '';\r\n  if (apiKey !== '') {\r\n    localStorage.setItem('tmp::voice_api_key', apiKey);\r\n  }\r\n\r\n  /**\r\n   * Instantiate:\r\n   * - WavRecorder (speech input)\r\n   * - WavStreamPlayer (speech output)\r\n   * - RealtimeClient (API client)\r\n   */\r\n  const [showEvents, setShowEvents] = useState(false);\r\n  const [showConversations, setShowConversations] = useState(false);\r\n\r\n\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  const audioRef = useRef<HTMLAudioElement>(null);\r\n  const simliClientRef = useRef<SimliClient | null>(null);\r\n  const simliAudioBufferRef = useRef<Uint8Array[]>([]);\r\n\r\n\r\n  const wavRecorderRef = useRef<WavRecorder>(\r\n    new WavRecorder({ sampleRate: 24000 })\r\n  );\r\n  const wavStreamPlayerRef = useRef<WavStreamPlayer>(\r\n    new WavStreamPlayer({ sampleRate: 24000 })\r\n  );\r\n  const clientRef = useRef<RealtimeClient>(\r\n    new RealtimeClient(\r\n      LOCAL_RELAY_SERVER_URL\r\n        ? { url: LOCAL_RELAY_SERVER_URL }\r\n        : {\r\n          apiKey: apiKey,\r\n          dangerouslyAllowAPIKeyInBrowser: true,\r\n        }\r\n    )\r\n  );\r\n\r\n  /**\r\n   * References for\r\n   * - Rendering audio visualization (canvas)\r\n   * - Autoscrolling event logs\r\n   * - Timing delta for event log displays\r\n   */\r\n  const clientCanvasRef = useRef<HTMLCanvasElement>(null);\r\n  const serverCanvasRef = useRef<HTMLCanvasElement>(null);\r\n  const eventsScrollHeightRef = useRef(0);\r\n  const eventsScrollRef = useRef<HTMLDivElement>(null);\r\n  const startTimeRef = useRef<string>(new Date().toISOString());\r\n\r\n  /**\r\n   * All of our variables for displaying application state\r\n   * - items are all conversation items (dialog)\r\n   * - realtimeEvents are event logs, which can be expanded\r\n   * - memoryKv is for set_memory() function\r\n   * - coords, marker are for get_weather() function\r\n   */\r\n  const [items, setItems] = useState<ItemType[]>([]);\r\n  const [realtimeEvents, setRealtimeEvents] = useState<RealtimeEvent[]>([]);\r\n  const [expandedEvents, setExpandedEvents] = useState<{\r\n    [key: string]: boolean;\r\n  }>({});\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [canPushToTalk, setCanPushToTalk] = useState(true);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [memoryKv, setMemoryKv] = useState<{ [key: string]: any }>({});\r\n  const [coords, setCoords] = useState<Coordinates | null>({\r\n    lat: 37.775593,\r\n    lng: -122.418137,\r\n  });\r\n  const [marker, setMarker] = useState<Coordinates | null>(null);\r\n\r\n  /**\r\n   * Utility for formatting the timing of logs\r\n   */\r\n  const formatTime = useCallback((timestamp: string) => {\r\n    const startTime = startTimeRef.current;\r\n    const t0 = new Date(startTime).valueOf();\r\n    const t1 = new Date(timestamp).valueOf();\r\n    const delta = t1 - t0;\r\n    const hs = Math.floor(delta / 10) % 100;\r\n    const s = Math.floor(delta / 1000) % 60;\r\n    const m = Math.floor(delta / 60_000) % 60;\r\n    const pad = (n: number) => {\r\n      let s = n + '';\r\n      while (s.length < 2) {\r\n        s = '0' + s;\r\n      }\r\n      return s;\r\n    };\r\n    return `${pad(m)}:${pad(s)}.${pad(hs)}`;\r\n  }, []);\r\n\r\n  /**\r\n   * When you click the API key\r\n   */\r\n  const resetAPIKey = useCallback(() => {\r\n    const apiKey = prompt('OpenAI API Key');\r\n    if (apiKey !== null) {\r\n      localStorage.clear();\r\n      localStorage.setItem('tmp::voice_api_key', apiKey);\r\n      window.location.reload();\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Connect to conversation:\r\n   * WavRecorder taks speech input, WavStreamPlayer output, client is API client\r\n   */\r\n  const connectConversation = useCallback(async () => {\r\n    const client = clientRef.current;\r\n    const wavRecorder = wavRecorderRef.current;\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n\r\n    // Set state variables\r\n    startTimeRef.current = new Date().toISOString();\r\n    setIsConnected(true);\r\n    setRealtimeEvents([]);\r\n    setItems(client.conversation.getItems());\r\n\r\n    // Connect to microphone\r\n    await wavRecorder.begin();\r\n\r\n    // Connect to audio output\r\n    await wavStreamPlayer.connect();\r\n\r\n    // Connect to realtime API\r\n    await client.connect();\r\n    client.sendUserMessageContent([\r\n      {\r\n        type: `input_text`,\r\n        text: `Hello!`,\r\n        // text: `For testing purposes, I want you to list ten car brands. Number each item, e.g. \"one (or whatever number you are one): the item name\".`\r\n      },\r\n    ]);\r\n\r\n    if (client.getTurnDetectionType() === 'server_vad') {\r\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Disconnect and reset conversation state\r\n   */\r\n  const disconnectConversation = useCallback(async () => {\r\n    setIsConnected(false);\r\n    setRealtimeEvents([]);\r\n    setItems([]);\r\n    setMemoryKv({});\r\n    setCoords({\r\n      lat: 37.775593,\r\n      lng: -122.418137,\r\n    });\r\n    setMarker(null);\r\n\r\n    const client = clientRef.current;\r\n    client.disconnect();\r\n\r\n    const wavRecorder = wavRecorderRef.current;\r\n    await wavRecorder.end();\r\n\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n    await wavStreamPlayer.interrupt();\r\n  }, []);\r\n\r\n  const deleteConversationItem = useCallback(async (id: string) => {\r\n    const client = clientRef.current;\r\n    client.deleteItem(id);\r\n  }, []);\r\n\r\n  const [isSimliReady, setIsSimliReady] = useState(false);\r\n\r\n  // In your useEffect where you initialize SimliClient\r\n  useEffect(() => {\r\n    if (simliClientRef.current) {\r\n      simliClientRef.current.on('connected', () => {\r\n        setIsSimliReady(true);\r\n      });\r\n\r\n      simliClientRef.current.on('disconnected', () => {\r\n        setIsSimliReady(false);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Get refs\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n    const client = clientRef.current;\r\n\r\n    // Initialize SimliClient\r\n    if (videoRef.current && audioRef.current) {\r\n      const simliApiKey = '7u9k31cjc3350xyfo8tvfq';\r\n      const simliFaceID = 'f7d80f58-d631-4b90-b12f-298b76a72751';\r\n\r\n      if (!simliApiKey || !simliFaceID) {\r\n        console.error('Simli API key or Face ID is not defined');\r\n      } else {\r\n        simliClientRef.current = new SimliClient();\r\n        simliClientRef.current.Initialize({\r\n          apiKey: simliApiKey,\r\n          faceID: simliFaceID,\r\n          handleSilence: true,\r\n          videoRef: videoRef,\r\n          audioRef: audioRef,\r\n        });\r\n\r\n        console.log('Simli Client initialized');\r\n      }\r\n    }\r\n\r\n    // Set instructions\r\n    client.updateSession({ instructions: instructions });\r\n    // Set transcription, otherwise we don't get user transcriptions back\r\n    client.updateSession({ input_audio_transcription: { model: 'whisper-1' } });\r\n\r\n    // Handle realtime events from client + server for event logging\r\n    // ... rest of your event handlers ...\r\n\r\n    return () => {\r\n      // Cleanup\r\n      client.reset();\r\n\r\n      // Close SimliClient on unmount\r\n      if (simliClientRef.current) {\r\n        simliClientRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n\r\n  const isSimliDataChannelOpen = () => {\r\n    if (!simliClientRef.current) return false;\r\n\r\n    // Access internal properties (may vary depending on SimliClient implementation)\r\n    const pc = (simliClientRef.current as any).pc as RTCPeerConnection | null;\r\n    const dc = (simliClientRef.current as any).dc as RTCDataChannel | null;\r\n\r\n    return (\r\n      pc !== null &&\r\n      pc.iceConnectionState === 'connected' &&\r\n      dc !== null &&\r\n      dc.readyState === 'open'\r\n    );\r\n  };\r\n\r\n\r\n\r\n\r\n  /**\r\n   * In push-to-talk mode, start recording\r\n   * .appendInputAudio() for each sample\r\n   */\r\n  const startRecording = async () => {\r\n    setIsRecording(true);\r\n    const client = clientRef.current;\r\n    const wavRecorder = wavRecorderRef.current;\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n    const trackSampleOffset = await wavStreamPlayer.interrupt();\r\n    if (trackSampleOffset?.trackId) {\r\n      const { trackId, offset } = trackSampleOffset;\r\n      await client.cancelResponse(trackId, offset);\r\n    }\r\n    await wavRecorder.record((data) => client.appendInputAudio(data.mono));\r\n  };\r\n\r\n  /**\r\n   * In push-to-talk mode, stop recording\r\n   */\r\n  const stopRecording = async () => {\r\n    setIsRecording(false);\r\n    const client = clientRef.current;\r\n    const wavRecorder = wavRecorderRef.current;\r\n    await wavRecorder.pause();\r\n    client.createResponse();\r\n  };\r\n\r\n  /**\r\n   * Switch between Manual <> VAD mode for communication\r\n   */\r\n  const changeTurnEndType = async (value: string) => {\r\n    const client = clientRef.current;\r\n    const wavRecorder = wavRecorderRef.current;\r\n    if (value === 'none' && wavRecorder.getStatus() === 'recording') {\r\n      await wavRecorder.pause();\r\n    }\r\n    client.updateSession({\r\n      turn_detection: value === 'none' ? null : { type: 'server_vad' },\r\n    });\r\n    if (value === 'server_vad' && client.isConnected()) {\r\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\r\n    }\r\n    setCanPushToTalk(value === 'none');\r\n  };\r\n\r\n  /**\r\n   * Auto-scroll the event logs\r\n   */\r\n  useEffect(() => {\r\n    changeTurnEndType('server_vad');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (eventsScrollRef.current) {\r\n      const eventsEl = eventsScrollRef.current;\r\n      const scrollHeight = eventsEl.scrollHeight;\r\n      // Only scroll if height has just changed\r\n      if (scrollHeight !== eventsScrollHeightRef.current) {\r\n        eventsEl.scrollTop = scrollHeight;\r\n        eventsScrollHeightRef.current = scrollHeight;\r\n      }\r\n    }\r\n  }, [realtimeEvents]);\r\n\r\n  /**\r\n   * Auto-scroll the conversation logs\r\n   */\r\n  useEffect(() => {\r\n    const conversationEls = [].slice.call(\r\n      document.body.querySelectorAll('[data-conversation-content]')\r\n    );\r\n    for (const el of conversationEls) {\r\n      const conversationEl = el as HTMLDivElement;\r\n      conversationEl.scrollTop = conversationEl.scrollHeight;\r\n    }\r\n  }, [items]);\r\n\r\n  /**\r\n   * Set up render loops for the visualization canvas\r\n   */\r\n  useEffect(() => {\r\n    let isLoaded = true;\r\n\r\n    const wavRecorder = wavRecorderRef.current;\r\n    const clientCanvas = clientCanvasRef.current;\r\n    let clientCtx: CanvasRenderingContext2D | null = null;\r\n\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n    const serverCanvas = serverCanvasRef.current;\r\n    let serverCtx: CanvasRenderingContext2D | null = null;\r\n\r\n    const render = () => {\r\n      if (isLoaded) {\r\n        if (clientCanvas) {\r\n          if (!clientCanvas.width || !clientCanvas.height) {\r\n            clientCanvas.width = clientCanvas.offsetWidth;\r\n            clientCanvas.height = clientCanvas.offsetHeight;\r\n          }\r\n          clientCtx = clientCtx || clientCanvas.getContext('2d');\r\n          if (clientCtx) {\r\n            clientCtx.clearRect(0, 0, clientCanvas.width, clientCanvas.height);\r\n            const result = wavRecorder.recording\r\n              ? wavRecorder.getFrequencies('voice')\r\n              : { values: new Float32Array([0]) };\r\n            WavRenderer.drawBars(\r\n              clientCanvas,\r\n              clientCtx,\r\n              result.values,\r\n              '#fcc909',\r\n              10,\r\n              0,\r\n              8\r\n            );\r\n          }\r\n        }\r\n        if (serverCanvas) {\r\n          if (!serverCanvas.width || !serverCanvas.height) {\r\n            serverCanvas.width = serverCanvas.offsetWidth;\r\n            serverCanvas.height = serverCanvas.offsetHeight;\r\n          }\r\n          serverCtx = serverCtx || serverCanvas.getContext('2d');\r\n          if (serverCtx) {\r\n            serverCtx.clearRect(0, 0, serverCanvas.width, serverCanvas.height);\r\n            const result = wavStreamPlayer.analyser\r\n              ? wavStreamPlayer.getFrequencies('voice')\r\n              : { values: new Float32Array([0]) };\r\n            WavRenderer.drawBars(\r\n              serverCanvas,\r\n              serverCtx,\r\n              result.values,\r\n              '#8d8d8d',\r\n              10,\r\n              0,\r\n              8\r\n            );\r\n          }\r\n        }\r\n        window.requestAnimationFrame(render);\r\n      }\r\n    };\r\n    render();\r\n\r\n    return () => {\r\n      isLoaded = false;\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * Core RealtimeClient and audio capture setup\r\n   * Set all of our instructions, tools, events and more\r\n   */\r\n  useEffect(() => {\r\n    // Get refs\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n    const client = clientRef.current;\r\n\r\n    // Set instructions\r\n    client.updateSession({ instructions: instructions });\r\n    // Set transcription, otherwise we don't get user transcriptions back\r\n    client.updateSession({ input_audio_transcription: { model: 'whisper-1' } });\r\n\r\n    // handle realtime events from client + server for event logging\r\n    client.on('realtime.event', (realtimeEvent: RealtimeEvent) => {\r\n      setRealtimeEvents((realtimeEvents) => {\r\n        const lastEvent = realtimeEvents[realtimeEvents.length - 1];\r\n        if (lastEvent?.event.type === realtimeEvent.event.type) {\r\n          // if we receive multiple events in a row, aggregate them for display purposes\r\n          lastEvent.count = (lastEvent.count || 0) + 1;\r\n          return realtimeEvents.slice(0, -1).concat(lastEvent);\r\n        } else {\r\n          return realtimeEvents.concat(realtimeEvent);\r\n        }\r\n      });\r\n    });\r\n    client.on('error', (event: any) => console.error(event));\r\n    client.on('conversation.interrupted', async () => {\r\n      const trackSampleOffset = await wavStreamPlayer.interrupt();\r\n      if (trackSampleOffset?.trackId) {\r\n        const { trackId, offset } = trackSampleOffset;\r\n        await client.cancelResponse(trackId, offset);\r\n      }\r\n    });\r\n    client.on('conversation.updated', async ({ item, delta }: any) => {\r\n      const items = client.conversation.getItems();\r\n      if (delta?.audio) {\r\n        if (simliClientRef.current) {\r\n          const audioData = new Int16Array(delta.audio);\r\n          const resampledAudioData = resampleAudioData(audioData, 24000, 16000);\r\n\r\n          if (isSimliDataChannelOpen()) {\r\n            // Send buffered audio first\r\n            if (simliAudioBufferRef.current.length > 0) {\r\n              simliAudioBufferRef.current.forEach((bufferedData) => {\r\n                simliClientRef.current!.sendAudioData(bufferedData);\r\n              });\r\n              simliAudioBufferRef.current = [];\r\n            }\r\n            // Send current resampled audio data\r\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\r\n            simliClientRef.current.sendAudioData(resampledAudioDataUint8);\r\n          } else {\r\n            // Buffer the resampled audio data\r\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\r\n            simliAudioBufferRef.current.push(resampledAudioDataUint8);\r\n            console.warn('Data channel is not open yet, buffering audio data');\r\n          }\r\n        }\r\n      }\r\n      if (item.status === 'completed' && item.formatted.audio?.length) {\r\n        const wavFile = await WavRecorder.decode(\r\n          item.formatted.audio,\r\n          24000,\r\n          24000\r\n        );\r\n        item.formatted.file = wavFile;\r\n      }\r\n      setItems(items);\r\n    });\r\n\r\n    setItems(client.conversation.getItems());\r\n\r\n    return () => {\r\n      // cleanup; resets to defaults\r\n      client.reset();\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * Render the application\r\n   */\r\n  return (\r\n    <div data-component=\"ConsolePage\">\r\n      <div className=\"content-top\">\r\n        <div className=\"content-title\">\r\n          <img src=\"https://www.enabel.be/app/uploads/2022/06/enabel-logo-color.svg\" alt=\"Enabel Logo\" style={{ width: '130px', height: '30px' }} />\r\n          {/* <span>realtime console</span> */}\r\n        </div>\r\n        <div className=\"content-api-key\">\r\n          {!LOCAL_RELAY_SERVER_URL && (\r\n            <Button\r\n              icon={Edit}\r\n              iconPosition=\"end\"\r\n              buttonStyle=\"flush\"\r\n              label={`api key: ${apiKey.slice(0, 3)}...`}\r\n              onClick={() => resetAPIKey()}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"content-main\">\r\n        <div className=\"content-logs\">\r\n          <div className=\"content-block events\">\r\n            <div className=\"video-container\">\r\n              <video\r\n                ref={videoRef}\r\n                autoPlay\r\n                playsInline\r\n                muted\r\n                className=\"video-background\"\r\n              />\r\n              <audio ref={audioRef} autoPlay />\r\n            </div>\r\n\r\n            {/* <div className=\"content-block-title\">events</div> */}\r\n            {/* <div className=\"content-block-body\" ref={eventsScrollRef}>\r\n              {showEvents && (\r\n                <>\r\n                  {!realtimeEvents.length && `awaiting connection...`}\r\n                  {realtimeEvents.map((realtimeEvent, i) => {\r\n                    const count = realtimeEvent.count;\r\n                    const event = { ...realtimeEvent.event };\r\n                    if (event.type === 'input_audio_buffer.append') {\r\n                      event.audio = `[trimmed: ${event.audio.length} bytes]`;\r\n                    } else if (event.type === 'response.audio.delta') {\r\n                      event.delta = `[trimmed: ${event.delta.length} bytes]`;\r\n                    }\r\n                    return (\r\n                      <div className=\"event\" key={event.event_id}>\r\n                        <div className=\"event-timestamp\">\r\n                          {formatTime(realtimeEvent.time)}\r\n                        </div>\r\n                        <div className=\"event-details\">\r\n                          <div\r\n                            className=\"event-summary\"\r\n                            onClick={() => {\r\n                              // toggle event details\r\n                              const id = event.event_id;\r\n                              const expanded = { ...expandedEvents };\r\n                              if (expanded[id]) {\r\n                                delete expanded[id];\r\n                              } else {\r\n                                expanded[id] = true;\r\n                              }\r\n                              setExpandedEvents(expanded);\r\n                            }}\r\n                          >\r\n                            <div\r\n                              className={`event-source ${event.type === 'error'\r\n                                ? 'error'\r\n                                : realtimeEvent.source\r\n                                }`}\r\n                            >\r\n                              {realtimeEvent.source === 'client' ? (\r\n                                <ArrowUp />\r\n                              ) : (\r\n                                <ArrowDown />\r\n                              )}\r\n                              <span>\r\n                                {event.type === 'error'\r\n                                  ? 'error!'\r\n                                  : realtimeEvent.source}\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"event-type\">\r\n                              {event.type}\r\n                              {count && ` (${count})`}\r\n                            </div>\r\n                          </div>\r\n                          {!!expandedEvents[event.event_id] && (\r\n                            <div className=\"event-payload\">\r\n                              {JSON.stringify(event, null, 2)}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </>\r\n              )}\r\n            </div> */}\r\n          </div>\r\n          <div className=\"content-block conversation\">\r\n            {/* <div className=\"content-block-title\">conversation</div> */}\r\n            <div className=\"content-block-body\" data-conversation-content>\r\n              {showConversations && (\r\n                <>\r\n                  {!items.length && `awaiting connection...`}\r\n                  {items.map((conversationItem, i) => {\r\n                    return (\r\n                      <div className=\"conversation-item\" key={conversationItem.id}>\r\n                        <div className={`speaker ${conversationItem.role || ''}`}>\r\n                          <div>\r\n                            {(\r\n                              conversationItem.role || conversationItem.type\r\n                            ).replaceAll('_', ' ')}\r\n                          </div>\r\n                          <div\r\n                            className=\"close\"\r\n                            onClick={() =>\r\n                              deleteConversationItem(conversationItem.id)\r\n                            }\r\n                          >\r\n                            <X />\r\n                          </div>\r\n                        </div>\r\n                        <div className={`speaker-content`}>\r\n                          {/* tool response */}\r\n                          {conversationItem.type === 'function_call_output' && (\r\n                            <div>{conversationItem.formatted.output}</div>\r\n                          )}\r\n                          {/* tool call */}\r\n                          {!!conversationItem.formatted.tool && (\r\n                            <div>\r\n                              {conversationItem.formatted.tool.name}(\r\n                              {conversationItem.formatted.tool.arguments})\r\n                            </div>\r\n                          )}\r\n                          {!conversationItem.formatted.tool &&\r\n                            conversationItem.role === 'user' && (\r\n                              <div>\r\n                                {conversationItem.formatted.transcript ||\r\n                                  (conversationItem.formatted.audio?.length\r\n                                    ? '(awaiting transcript)'\r\n                                    : conversationItem.formatted.text ||\r\n                                    '(item sent)')}\r\n                              </div>\r\n                            )}\r\n                          {!conversationItem.formatted.tool &&\r\n                            conversationItem.role === 'assistant' && (\r\n                              <div>\r\n                                {conversationItem.formatted.transcript ||\r\n                                  conversationItem.formatted.text ||\r\n                                  '(truncated)'}\r\n                              </div>\r\n                            )}\r\n                          {conversationItem.formatted.file && (\r\n                            <audio\r\n                              src={conversationItem.formatted.file.url}\r\n                              controls\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"content-actions\">\r\n            {/* <Toggle\r\n              defaultValue={false}\r\n              labels={['manual', 'vad']}\r\n              values={['none', 'server_vad']}\r\n              onChange={(_, value) => changeTurnEndType(value)}\r\n            /> */}\r\n            {/* <div className=\"spacer\" /> */}\r\n            {/* {isConnected && canPushToTalk && (\r\n              <Button\r\n                label={isRecording ? 'release to send' : 'push to talk'}\r\n                buttonStyle={isRecording ? 'alert' : 'regular'}\r\n                disabled={!isConnected || !canPushToTalk}\r\n                onMouseDown={startRecording}\r\n                onMouseUp={stopRecording}\r\n              />\r\n            )} */}\r\n            {/* <div className=\"spacer\" /> */}\r\n            <Button\r\n              label={isConnected ? 'disconnect' : 'connect'}\r\n              iconPosition={isConnected ? 'end' : 'start'}\r\n              icon={isConnected ? X : Zap}\r\n              buttonStyle={isConnected ? 'regular' : 'action'}\r\n              onClick={\r\n                isConnected ? disconnectConversation : connectConversation\r\n              }\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"content-right\">\r\n          <div className=\"content-block map\">\r\n            <div className=\"content-block-title\">get_weather()</div>\r\n            <div className=\"content-block-title bottom\">\r\n              {marker?.location || 'not yet retrieved'}\r\n              {!!marker?.temperature && (\r\n                <>\r\n                  <br />\r\n                  🌡️ {marker.temperature.value} {marker.temperature.units}\r\n                </>\r\n              )}\r\n              {!!marker?.wind_speed && (\r\n                <>\r\n                  {' '}\r\n                  🍃 {marker.wind_speed.value} {marker.wind_speed.units}\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"content-block-body full\">\r\n              {coords && (\r\n                <Map\r\n                  center={[coords.lat, coords.lng]}\r\n                  location={coords.location}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"content-block kv\">\r\n            <div className=\"content-block-title\">set_memory()</div>\r\n            <div className=\"content-block-body content-kv\">\r\n              {JSON.stringify(memoryKv, null, 2)}\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}