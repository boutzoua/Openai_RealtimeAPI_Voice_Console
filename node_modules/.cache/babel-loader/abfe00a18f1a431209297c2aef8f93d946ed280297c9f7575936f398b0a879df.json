{"ast":null,"code":"var _jsxFileName = \"/Users/smartleet/Desktop/Openai_RealtimeAPI_Voice_Console/src/pages/ConsolePage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useCallback, useState } from 'react';\nimport { RealtimeClient } from '@openai/realtime-api-beta';\nimport { WavRecorder, WavStreamPlayer } from '../lib/wavtools/index.js';\nimport { instructions } from '../utils/conversation_config.js';\nimport { WavRenderer } from '../utils/wav_renderer';\nimport { X, Edit, Zap, ArrowUp, ArrowDown } from 'react-feather';\nimport { Button } from '../components/button/Button';\nimport { SimliClient } from 'simli-client';\nimport './ConsolePage.scss';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LOCAL_RELAY_SERVER_URL = process.env.REACT_APP_LOCAL_RELAY_SERVER_URL || '';\nfunction resampleAudioData(inputData, inputSampleRate, outputSampleRate) {\n  const sampleRateRatio = inputSampleRate / outputSampleRate;\n  const outputLength = Math.round(inputData.length / sampleRateRatio);\n  const outputData = new Int16Array(outputLength);\n  for (let i = 0; i < outputLength; i++) {\n    const sourceIndex = i * sampleRateRatio;\n    const lowerIndex = Math.floor(sourceIndex);\n    const upperIndex = Math.min(lowerIndex + 1, inputData.length - 1);\n    const interpolation = sourceIndex - lowerIndex;\n    outputData[i] = (1 - interpolation) * inputData[lowerIndex] + interpolation * inputData[upperIndex];\n  }\n  return outputData;\n}\nexport function ConsolePage() {\n  _s();\n  const apiKey = LOCAL_RELAY_SERVER_URL ? '' : localStorage.getItem('tmp::voice_api_key') || prompt('OpenAI API Key') || '';\n  if (apiKey !== '') {\n    localStorage.setItem('tmp::voice_api_key', apiKey);\n  }\n  const [showEvents, setShowEvents] = useState(false);\n  const [showConversations, setShowConversations] = useState(false);\n  const wavRecorderRef = useRef(new WavRecorder({\n    sampleRate: 24000\n  }));\n  const wavStreamPlayerRef = useRef(new WavStreamPlayer({\n    sampleRate: 24000\n  }));\n  const clientRef = useRef(new RealtimeClient(LOCAL_RELAY_SERVER_URL ? {\n    url: LOCAL_RELAY_SERVER_URL\n  } : {\n    apiKey: apiKey,\n    dangerouslyAllowAPIKeyInBrowser: true\n  }));\n\n  // Simli refs\n  const videoRef = useRef(null);\n  const audioRef = useRef(null);\n  const simliClientRef = useRef(null);\n  const simliAudioBufferRef = useRef([]);\n  const clientCanvasRef = useRef(null);\n  const serverCanvasRef = useRef(null);\n  const eventsScrollHeightRef = useRef(0);\n  const eventsScrollRef = useRef(null);\n  const startTimeRef = useRef(new Date().toISOString());\n  const [items, setItems] = useState([]);\n  const [realtimeEvents, setRealtimeEvents] = useState([]);\n  const [expandedEvents, setExpandedEvents] = useState({});\n  const [isConnected, setIsConnected] = useState(false);\n  const [canPushToTalk, setCanPushToTalk] = useState(true);\n  const [isRecording, setIsRecording] = useState(false);\n  const [memoryKv, setMemoryKv] = useState({});\n  const [coords, setCoords] = useState({\n    lat: 37.775593,\n    lng: -122.418137\n  });\n  const [marker, setMarker] = useState(null);\n  const formatTime = useCallback(timestamp => {\n    const startTime = startTimeRef.current;\n    const t0 = new Date(startTime).valueOf();\n    const t1 = new Date(timestamp).valueOf();\n    const delta = t1 - t0;\n    const hs = Math.floor(delta / 10) % 100;\n    const s = Math.floor(delta / 1000) % 60;\n    const m = Math.floor(delta / 60000) % 60;\n    const pad = n => {\n      let s = n + '';\n      while (s.length < 2) {\n        s = '0' + s;\n      }\n      return s;\n    };\n    return `${pad(m)}:${pad(s)}.${pad(hs)}`;\n  }, []);\n  const resetAPIKey = useCallback(() => {\n    const apiKey = prompt('OpenAI API Key');\n    if (apiKey !== null) {\n      localStorage.clear();\n      localStorage.setItem('tmp::voice_api_key', apiKey);\n      window.location.reload();\n    }\n  }, []);\n  const isSimliDataChannelOpen = () => {\n    if (!simliClientRef.current) return false;\n\n    // Access internal properties (may vary depending on SimliClient implementation)\n    const pc = simliClientRef.current.pc;\n    const dc = simliClientRef.current.dc;\n    return pc !== null && pc.iceConnectionState === 'connected' && dc !== null && dc.readyState === 'open';\n  };\n\n  /**\r\n   * Connect to conversation:\r\n   * WavRecorder taks speech input, WavStreamPlayer output, client is API client\r\n   */\n  const connectConversation = useCallback(async () => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n\n    // Define audio constraints for noise suppression, echo cancellation, and auto gain control\n    const constraints = {\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true,\n        autoGainControl: true\n      }\n    };\n\n    // Set state variables\n    startTimeRef.current = new Date().toISOString();\n    setIsConnected(true);\n    setRealtimeEvents([]);\n    setItems(client.conversation.getItems());\n\n    // Start Simli WebRTC connection\n    if (simliClientRef.current) {\n      simliClientRef.current.start();\n\n      // Send empty audio data to Simli\n      const audioData = new Uint8Array(6000).fill(0);\n      simliClientRef.current.sendAudioData(audioData);\n      console.log('Sent initial empty audio data to Simli');\n    }\n\n    // Now connect to OpenAI's realtime API\n    await client.connect();\n\n    // Connect to microphone\n    await wavRecorder.begin();\n\n    // Connect to audio output\n    await wavStreamPlayer.connect();\n    if (client.getTurnDetectionType() === 'server_vad') {\n      await wavRecorder.record(data => client.appendInputAudio(data.mono));\n    }\n  }, []);\n  const changeVoiceType = async () => {\n    const client = clientRef.current;\n\n    /**\r\n    // Access the voice setting from the environment variable\r\n    */\n    // Define allowed voices\n    const allowedVoices = ['shimmer', 'alloy', 'echo'];\n\n    // Get voice from environment variable (defaults to 'shimmer' if not set)\n    const voice = process.env.REACT_APP_VOICE || 'shimmer';\n\n    // Validate that the voice is one of the allowed options\n    const validVoice = allowedVoices.includes(voice) ? voice : 'shimmer'; // Default to 'shimmer' if invalid\n\n    client.updateSession({\n      voice: validVoice\n    });\n  };\n\n  // Use useEffect to call the function on component mount\n  useEffect(() => {\n    changeVoiceType();\n  }, []);\n\n  /**\r\n   * Disconnect and reset conversation state\r\n   */\n  const disconnectConversation = useCallback(async () => {\n    setIsConnected(false);\n    setRealtimeEvents([]);\n    setItems([]);\n    setMemoryKv({});\n    const client = clientRef.current;\n    client.disconnect();\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.end();\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    await wavStreamPlayer.interrupt();\n\n    // Close Simli connection\n    if (simliClientRef.current) {\n      simliClientRef.current.close();\n    }\n  }, []);\n  const deleteConversationItem = useCallback(async id => {\n    const client = clientRef.current;\n    client.deleteItem(id);\n  }, []);\n\n  /**\r\n   * In push-to-talk mode, start recording\r\n   * .appendInputAudio() for each sample\r\n   */\n  const startRecording = async () => {\n    setIsRecording(true);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const trackSampleOffset = await wavStreamPlayer.interrupt();\n    if (trackSampleOffset !== null && trackSampleOffset !== void 0 && trackSampleOffset.trackId) {\n      const {\n        trackId,\n        offset\n      } = trackSampleOffset;\n      await client.cancelResponse(trackId, offset);\n    }\n    await wavRecorder.record(data => client.appendInputAudio(data.mono));\n  };\n\n  /**\r\n   * In push-to-talk mode, stop recording\r\n   */\n  const stopRecording = async () => {\n    setIsRecording(false);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.pause();\n    client.createResponse();\n  };\n\n  /**\r\n   * Switch between Manual <> VAD mode for communication\r\n   */\n  const changeTurnEndType = async value => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    if (value === 'none' && wavRecorder.getStatus() === 'recording') {\n      await wavRecorder.pause();\n    }\n    client.updateSession({\n      turn_detection: value === 'none' ? null : {\n        type: 'server_vad'\n      }\n    });\n    if (value === 'server_vad' && client.isConnected()) {\n      await wavRecorder.record(data => client.appendInputAudio(data.mono));\n    }\n    setCanPushToTalk(value === 'none');\n  };\n\n  /**\r\n   * Auto-scroll the event logs\r\n   */\n  useEffect(() => {\n    changeTurnEndType('server_vad');\n  }, []);\n  useEffect(() => {\n    if (eventsScrollRef.current) {\n      const eventsEl = eventsScrollRef.current;\n      const scrollHeight = eventsEl.scrollHeight;\n      // Only scroll if height has just changed\n      if (scrollHeight !== eventsScrollHeightRef.current) {\n        eventsEl.scrollTop = scrollHeight;\n        eventsScrollHeightRef.current = scrollHeight;\n      }\n    }\n  }, [realtimeEvents]);\n\n  /**\r\n   * Auto-scroll the conversation logs\r\n   */\n  useEffect(() => {\n    const conversationEls = [].slice.call(document.body.querySelectorAll('[data-conversation-content]'));\n    for (const el of conversationEls) {\n      const conversationEl = el;\n      conversationEl.scrollTop = conversationEl.scrollHeight;\n    }\n  }, [items]);\n\n  /**\r\n   * Set up render loops for the visualization canvas\r\n   */\n  useEffect(() => {\n    let isLoaded = true;\n    const wavRecorder = wavRecorderRef.current;\n    const clientCanvas = clientCanvasRef.current;\n    let clientCtx = null;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const serverCanvas = serverCanvasRef.current;\n    let serverCtx = null;\n    const render = () => {\n      if (isLoaded) {\n        if (clientCanvas) {\n          if (!clientCanvas.width || !clientCanvas.height) {\n            clientCanvas.width = clientCanvas.offsetWidth;\n            clientCanvas.height = clientCanvas.offsetHeight;\n          }\n          clientCtx = clientCtx || clientCanvas.getContext('2d');\n          if (clientCtx) {\n            clientCtx.clearRect(0, 0, clientCanvas.width, clientCanvas.height);\n            const result = wavRecorder.recording ? wavRecorder.getFrequencies('voice') : {\n              values: new Float32Array([0])\n            };\n            WavRenderer.drawBars(clientCanvas, clientCtx, result.values, '#fcc909', 10, 0, 8);\n          }\n        }\n        if (serverCanvas) {\n          if (!serverCanvas.width || !serverCanvas.height) {\n            serverCanvas.width = serverCanvas.offsetWidth;\n            serverCanvas.height = serverCanvas.offsetHeight;\n          }\n          serverCtx = serverCtx || serverCanvas.getContext('2d');\n          if (serverCtx) {\n            serverCtx.clearRect(0, 0, serverCanvas.width, serverCanvas.height);\n            const result = wavStreamPlayer.analyser ? wavStreamPlayer.getFrequencies('voice') : {\n              values: new Float32Array([0])\n            };\n            WavRenderer.drawBars(serverCanvas, serverCtx, result.values, '#8d8d8d', 10, 0, 8);\n          }\n        }\n        window.requestAnimationFrame(render);\n      }\n    };\n    render();\n    return () => {\n      isLoaded = false;\n    };\n  }, []);\n\n  /**\r\n   * Core RealtimeClient and audio capture setup\r\n   * Set all of our instructions, tools, events and more\r\n   */\n  useEffect(() => {\n    // Get refs\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const client = clientRef.current;\n\n    // Initialize SimliClient\n    if (videoRef.current && audioRef.current) {\n      const simliApiKey = '7u9k31cjc3350xyfo8tvfq';\n      const simliFaceID = \"f7d80f58-d631-4b90-b12f-298b76a72751\";\n      if (!simliApiKey || !simliFaceID) {\n        console.error('Simli API key or Face ID is not defined');\n      } else {\n        const SimliConfig = {\n          apiKey: simliApiKey,\n          faceID: simliFaceID,\n          handleSilence: true,\n          videoRef: videoRef,\n          audioRef: audioRef\n        };\n        simliClientRef.current = new SimliClient();\n        simliClientRef.current.Initialize(SimliConfig);\n        console.log('Simli Client initialized');\n      }\n    }\n\n    // Set instructions\n    client.updateSession({\n      instructions: instructions\n    });\n    // Set transcription, otherwise we don't get user transcriptions back\n    client.updateSession({\n      input_audio_transcription: {\n        model: 'whisper-1'\n      }\n    });\n\n    // handle realtime events from client + server for event logging\n    client.on('realtime.event', realtimeEvent => {\n      setRealtimeEvents(realtimeEvents => {\n        const lastEvent = realtimeEvents[realtimeEvents.length - 1];\n        if ((lastEvent === null || lastEvent === void 0 ? void 0 : lastEvent.event.type) === realtimeEvent.event.type) {\n          lastEvent.count = (lastEvent.count || 0) + 1;\n          return realtimeEvents.slice(0, -1).concat(lastEvent);\n        } else {\n          return realtimeEvents.concat(realtimeEvent);\n        }\n      });\n    });\n    client.on('error', event => console.error(event));\n    client.on('conversation.interrupted', async () => {\n      // Stop sending further audio data to Simli\n      simliAudioBufferRef.current = [];\n    });\n    client.on('conversation.updated', async ({\n      item,\n      delta\n    }) => {\n      var _item$formatted$audio;\n      const items = client.conversation.getItems();\n      if (delta !== null && delta !== void 0 && delta.audio) {\n        if (simliClientRef.current) {\n          const audioData = new Int16Array(delta.audio);\n          const resampledAudioData = resampleAudioData(audioData, 24000, 16000);\n          if (isSimliDataChannelOpen()) {\n            // Send buffered audio first\n            if (simliAudioBufferRef.current.length > 0) {\n              simliAudioBufferRef.current.forEach(bufferedData => {\n                simliClientRef.current.sendAudioData(bufferedData);\n              });\n              simliAudioBufferRef.current = [];\n            }\n            // Send current resampled audio data\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\n            simliClientRef.current.sendAudioData(resampledAudioDataUint8);\n          } else {\n            // Buffer the resampled audio data\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\n            simliAudioBufferRef.current.push(resampledAudioDataUint8);\n            console.warn('Data channel is not open yet, buffering audio data');\n          }\n        }\n      }\n      if (item.status === 'completed' && (_item$formatted$audio = item.formatted.audio) !== null && _item$formatted$audio !== void 0 && _item$formatted$audio.length) {\n        const wavFile = await WavRecorder.decode(item.formatted.audio, 24000, 24000);\n        item.formatted.file = wavFile;\n      }\n      setItems(items);\n    });\n    setItems(client.conversation.getItems());\n    return () => {\n      // cleanup; resets to defaults\n      client.reset();\n\n      // Close SimliClient on unmount\n      if (simliClientRef.current) {\n        simliClientRef.current.close();\n      }\n    };\n  }, []);\n\n  /**\r\n   * Render the application\r\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-component\": \"ConsolePage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-top\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-title\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://www.enabel.be/app/uploads/2022/06/enabel-logo-color.svg\",\n          alt: \"Enabel Logo\",\n          style: {\n            width: '130px',\n            height: '30px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-api-key\",\n        children: !LOCAL_RELAY_SERVER_URL && /*#__PURE__*/_jsxDEV(Button, {\n          icon: Edit,\n          iconPosition: \"end\",\n          buttonStyle: \"flush\",\n          label: `api key: ${apiKey.slice(0, 3)}...`,\n          onClick: () => resetAPIKey()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        playsInline: true,\n        muted: true,\n        className: \"video-background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-logs\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-block events\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"visualization\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"visualization-entry client\",\n              children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n                ref: clientCanvasRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"visualization-entry server\",\n              children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n                ref: serverCanvasRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-body\",\n            ref: eventsScrollRef,\n            children: showEvents && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [!realtimeEvents.length && `awaiting connection...`, realtimeEvents.map((realtimeEvent, i) => {\n                const count = realtimeEvent.count;\n                const event = {\n                  ...realtimeEvent.event\n                };\n                if (event.type === 'input_audio_buffer.append') {\n                  event.audio = `[trimmed: ${event.audio.length} bytes]`;\n                } else if (event.type === 'response.audio.delta') {\n                  event.delta = `[trimmed: ${event.delta.length} bytes]`;\n                }\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"event\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"event-timestamp\",\n                    children: formatTime(realtimeEvent.time)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 591,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"event-details\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"event-summary\",\n                      onClick: () => {\n                        // toggle event details\n                        const id = event.event_id;\n                        const expanded = {\n                          ...expandedEvents\n                        };\n                        if (expanded[id]) {\n                          delete expanded[id];\n                        } else {\n                          expanded[id] = true;\n                        }\n                        setExpandedEvents(expanded);\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: `event-source ${event.type === 'error' ? 'error' : realtimeEvent.source}`,\n                        children: [realtimeEvent.source === 'client' ? /*#__PURE__*/_jsxDEV(ArrowUp, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 616,\n                          columnNumber: 33\n                        }, this) : /*#__PURE__*/_jsxDEV(ArrowDown, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 618,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          children: event.type === 'error' ? 'error!' : realtimeEvent.source\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 620,\n                          columnNumber: 31\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 609,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"event-type\",\n                        children: [event.type, count && ` (${count})`]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 626,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 595,\n                      columnNumber: 27\n                    }, this), !!expandedEvents[event.event_id] && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"event-payload\",\n                      children: JSON.stringify(event, null, 2)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 632,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 594,\n                    columnNumber: 25\n                  }, this)]\n                }, event.event_id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 590,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-block conversation\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-body\",\n            \"data-conversation-content\": true,\n            children: showConversations && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [!items.length && `awaiting connection...`, items.map((conversationItem, i) => {\n                var _conversationItem$for;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"conversation-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `speaker ${conversationItem.role || ''}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: (conversationItem.role || conversationItem.type).replaceAll('_', ' ')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 654,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"close\",\n                      onClick: () => deleteConversationItem(conversationItem.id),\n                      children: /*#__PURE__*/_jsxDEV(X, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 665,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 659,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 653,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `speaker-content`,\n                    children: [conversationItem.type === 'function_call_output' && /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: conversationItem.formatted.output\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 671,\n                      columnNumber: 29\n                    }, this), !!conversationItem.formatted.tool && /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [conversationItem.formatted.tool.name, \"(\", conversationItem.formatted.tool.arguments, \")\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 675,\n                      columnNumber: 29\n                    }, this), !conversationItem.formatted.tool && conversationItem.role === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: conversationItem.formatted.transcript || ((_conversationItem$for = conversationItem.formatted.audio) !== null && _conversationItem$for !== void 0 && _conversationItem$for.length ? '(awaiting transcript)' : conversationItem.formatted.text || '(item sent)')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 682,\n                      columnNumber: 31\n                    }, this), !conversationItem.formatted.tool && conversationItem.role === 'assistant' && /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: conversationItem.formatted.transcript || conversationItem.formatted.text || '(truncated)'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 692,\n                      columnNumber: 31\n                    }, this), conversationItem.formatted.file && /*#__PURE__*/_jsxDEV(\"audio\", {\n                      src: conversationItem.formatted.file.url,\n                      controls: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 699,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 668,\n                    columnNumber: 25\n                  }, this)]\n                }, conversationItem.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 652,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-actions\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            label: isConnected ? 'disconnect' : 'connect',\n            iconPosition: isConnected ? 'end' : 'start',\n            icon: isConnected ? X : Zap,\n            buttonStyle: isConnected ? 'regular' : 'action',\n            onClick: isConnected ? disconnectConversation : connectConversation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 539,\n    columnNumber: 5\n  }, this);\n}\n_s(ConsolePage, \"5R4rvAIErF5BRaaRTDmyLWjoXQg=\");\n_c = ConsolePage;\nvar _c;\n$RefreshReg$(_c, \"ConsolePage\");","map":{"version":3,"names":["useEffect","useRef","useCallback","useState","RealtimeClient","WavRecorder","WavStreamPlayer","instructions","WavRenderer","X","Edit","Zap","ArrowUp","ArrowDown","Button","SimliClient","jsxDEV","_jsxDEV","Fragment","_Fragment","LOCAL_RELAY_SERVER_URL","process","env","REACT_APP_LOCAL_RELAY_SERVER_URL","resampleAudioData","inputData","inputSampleRate","outputSampleRate","sampleRateRatio","outputLength","Math","round","length","outputData","Int16Array","i","sourceIndex","lowerIndex","floor","upperIndex","min","interpolation","ConsolePage","_s","apiKey","localStorage","getItem","prompt","setItem","showEvents","setShowEvents","showConversations","setShowConversations","wavRecorderRef","sampleRate","wavStreamPlayerRef","clientRef","url","dangerouslyAllowAPIKeyInBrowser","videoRef","audioRef","simliClientRef","simliAudioBufferRef","clientCanvasRef","serverCanvasRef","eventsScrollHeightRef","eventsScrollRef","startTimeRef","Date","toISOString","items","setItems","realtimeEvents","setRealtimeEvents","expandedEvents","setExpandedEvents","isConnected","setIsConnected","canPushToTalk","setCanPushToTalk","isRecording","setIsRecording","memoryKv","setMemoryKv","coords","setCoords","lat","lng","marker","setMarker","formatTime","timestamp","startTime","current","t0","valueOf","t1","delta","hs","s","m","pad","n","resetAPIKey","clear","window","location","reload","isSimliDataChannelOpen","pc","dc","iceConnectionState","readyState","connectConversation","client","wavRecorder","wavStreamPlayer","constraints","audio","echoCancellation","noiseSuppression","autoGainControl","conversation","getItems","start","audioData","Uint8Array","fill","sendAudioData","console","log","connect","begin","getTurnDetectionType","record","data","appendInputAudio","mono","changeVoiceType","allowedVoices","voice","REACT_APP_VOICE","validVoice","includes","updateSession","disconnectConversation","disconnect","end","interrupt","close","deleteConversationItem","id","deleteItem","startRecording","trackSampleOffset","trackId","offset","cancelResponse","stopRecording","pause","createResponse","changeTurnEndType","value","getStatus","turn_detection","type","eventsEl","scrollHeight","scrollTop","conversationEls","slice","call","document","body","querySelectorAll","el","conversationEl","isLoaded","clientCanvas","clientCtx","serverCanvas","serverCtx","render","width","height","offsetWidth","offsetHeight","getContext","clearRect","result","recording","getFrequencies","values","Float32Array","drawBars","analyser","requestAnimationFrame","simliApiKey","simliFaceID","error","SimliConfig","faceID","handleSilence","Initialize","input_audio_transcription","model","on","realtimeEvent","lastEvent","event","count","concat","item","_item$formatted$audio","resampledAudioData","forEach","bufferedData","resampledAudioDataUint8","buffer","push","warn","status","formatted","wavFile","decode","file","reset","children","className","src","alt","style","fileName","_jsxFileName","lineNumber","columnNumber","icon","iconPosition","buttonStyle","label","onClick","ref","autoPlay","playsInline","muted","map","time","event_id","expanded","source","JSON","stringify","conversationItem","_conversationItem$for","role","replaceAll","output","tool","name","arguments","transcript","text","controls","_c","$RefreshReg$"],"sources":["/Users/smartleet/Desktop/Openai_RealtimeAPI_Voice_Console/src/pages/ConsolePage.tsx"],"sourcesContent":["import { useEffect, useRef, useCallback, useState } from 'react';\r\n\r\nimport { RealtimeClient } from '@openai/realtime-api-beta';\r\nimport { ItemType } from '@openai/realtime-api-beta/dist/lib/client.js';\r\nimport { WavRecorder, WavStreamPlayer } from '../lib/wavtools/index.js';\r\nimport { instructions } from '../utils/conversation_config.js';\r\nimport { WavRenderer } from '../utils/wav_renderer';\r\n\r\nimport { X, Edit, Zap, ArrowUp, ArrowDown } from 'react-feather';\r\nimport { Button } from '../components/button/Button';\r\nimport { SimliClient } from 'simli-client';\r\nimport './ConsolePage.scss';\r\n\r\n\r\nconst LOCAL_RELAY_SERVER_URL: string =\r\n  process.env.REACT_APP_LOCAL_RELAY_SERVER_URL || '';\r\n\r\n\r\ninterface Coordinates {\r\n  lat: number;\r\n  lng: number;\r\n  location?: string;\r\n  temperature?: {\r\n    value: number;\r\n    units: string;\r\n  };\r\n  wind_speed?: {\r\n    value: number;\r\n    units: string;\r\n  };\r\n}\r\n\r\n\r\ninterface RealtimeEvent {\r\n  time: string;\r\n  source: 'client' | 'server';\r\n  count?: number;\r\n  event: { [key: string]: any };\r\n}\r\n\r\nfunction resampleAudioData(\r\n  inputData: Int16Array,\r\n  inputSampleRate: number,\r\n  outputSampleRate: number\r\n): Int16Array {\r\n  const sampleRateRatio = inputSampleRate / outputSampleRate;\r\n  const outputLength = Math.round(inputData.length / sampleRateRatio);\r\n  const outputData = new Int16Array(outputLength);\r\n\r\n  for (let i = 0; i < outputLength; i++) {\r\n    const sourceIndex = i * sampleRateRatio;\r\n    const lowerIndex = Math.floor(sourceIndex);\r\n    const upperIndex = Math.min(lowerIndex + 1, inputData.length - 1);\r\n    const interpolation = sourceIndex - lowerIndex;\r\n    outputData[i] =\r\n      (1 - interpolation) * inputData[lowerIndex] +\r\n      interpolation * inputData[upperIndex];\r\n  }\r\n\r\n  return outputData;\r\n}\r\n\r\n\r\n\r\nexport function ConsolePage() {\r\n  const apiKey = LOCAL_RELAY_SERVER_URL\r\n    ? ''\r\n    : localStorage.getItem('tmp::voice_api_key') ||\r\n    prompt('OpenAI API Key') ||\r\n    '';\r\n  if (apiKey !== '') {\r\n    localStorage.setItem('tmp::voice_api_key', apiKey);\r\n  }\r\n\r\n\r\n  const [showEvents, setShowEvents] = useState(false);\r\n  const [showConversations, setShowConversations] = useState(false);\r\n\r\n  const wavRecorderRef = useRef<WavRecorder>(\r\n    new WavRecorder({ sampleRate: 24000 })\r\n  );\r\n  const wavStreamPlayerRef = useRef<WavStreamPlayer>(\r\n    new WavStreamPlayer({ sampleRate: 24000 })\r\n  );\r\n  const clientRef = useRef<RealtimeClient>(\r\n    new RealtimeClient(\r\n      LOCAL_RELAY_SERVER_URL\r\n        ? { url: LOCAL_RELAY_SERVER_URL }\r\n        : {\r\n          apiKey: apiKey,\r\n          dangerouslyAllowAPIKeyInBrowser: true,\r\n        }\r\n    )\r\n  );\r\n\r\n  // Simli refs\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  const audioRef = useRef<HTMLAudioElement>(null);\r\n  const simliClientRef = useRef<SimliClient | null>(null);\r\n  const simliAudioBufferRef = useRef<Uint8Array[]>([]);\r\n\r\n\r\n\r\n  const clientCanvasRef = useRef<HTMLCanvasElement>(null);\r\n  const serverCanvasRef = useRef<HTMLCanvasElement>(null);\r\n  const eventsScrollHeightRef = useRef(0);\r\n  const eventsScrollRef = useRef<HTMLDivElement>(null);\r\n  const startTimeRef = useRef<string>(new Date().toISOString());\r\n\r\n\r\n  const [items, setItems] = useState<ItemType[]>([]);\r\n  const [realtimeEvents, setRealtimeEvents] = useState<RealtimeEvent[]>([]);\r\n  const [expandedEvents, setExpandedEvents] = useState<{\r\n    [key: string]: boolean;\r\n  }>({});\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [canPushToTalk, setCanPushToTalk] = useState(true);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [memoryKv, setMemoryKv] = useState<{ [key: string]: any }>({});\r\n  const [coords, setCoords] = useState<Coordinates | null>({\r\n    lat: 37.775593,\r\n    lng: -122.418137,\r\n  });\r\n  const [marker, setMarker] = useState<Coordinates | null>(null);\r\n\r\n\r\n  const formatTime = useCallback((timestamp: string) => {\r\n    const startTime = startTimeRef.current;\r\n    const t0 = new Date(startTime).valueOf();\r\n    const t1 = new Date(timestamp).valueOf();\r\n    const delta = t1 - t0;\r\n    const hs = Math.floor(delta / 10) % 100;\r\n    const s = Math.floor(delta / 1000) % 60;\r\n    const m = Math.floor(delta / 60_000) % 60;\r\n    const pad = (n: number) => {\r\n      let s = n + '';\r\n      while (s.length < 2) {\r\n        s = '0' + s;\r\n      }\r\n      return s;\r\n    };\r\n    return `${pad(m)}:${pad(s)}.${pad(hs)}`;\r\n  }, []);\r\n\r\n\r\n  const resetAPIKey = useCallback(() => {\r\n    const apiKey = prompt('OpenAI API Key');\r\n    if (apiKey !== null) {\r\n      localStorage.clear();\r\n      localStorage.setItem('tmp::voice_api_key', apiKey);\r\n      window.location.reload();\r\n    }\r\n  }, []);\r\n\r\n\r\n  const isSimliDataChannelOpen = () => {\r\n    if (!simliClientRef.current) return false;\r\n\r\n    // Access internal properties (may vary depending on SimliClient implementation)\r\n    const pc = (simliClientRef.current as any).pc as RTCPeerConnection | null;\r\n    const dc = (simliClientRef.current as any).dc as RTCDataChannel | null;\r\n\r\n    return (\r\n      pc !== null &&\r\n      pc.iceConnectionState === 'connected' &&\r\n      dc !== null &&\r\n      dc.readyState === 'open'\r\n    );\r\n  };\r\n\r\n\r\n  /**\r\n   * Connect to conversation:\r\n   * WavRecorder taks speech input, WavStreamPlayer output, client is API client\r\n   */\r\n  const connectConversation = useCallback(async () => {\r\n    const client = clientRef.current;\r\n    const wavRecorder = wavRecorderRef.current;\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n\r\n    // Define audio constraints for noise suppression, echo cancellation, and auto gain control\r\n    const constraints = {\r\n      audio: {\r\n        echoCancellation: true,\r\n        noiseSuppression: true,\r\n        autoGainControl: true,\r\n      },\r\n    };\r\n\r\n    // Set state variables\r\n    startTimeRef.current = new Date().toISOString();\r\n    setIsConnected(true);\r\n    setRealtimeEvents([]);\r\n    setItems(client.conversation.getItems());\r\n\r\n    // Start Simli WebRTC connection\r\n    if (simliClientRef.current) {\r\n      simliClientRef.current.start();\r\n\r\n      // Send empty audio data to Simli\r\n      const audioData = new Uint8Array(6000).fill(0);\r\n      simliClientRef.current.sendAudioData(audioData);\r\n      console.log('Sent initial empty audio data to Simli');\r\n    }\r\n\r\n    // Now connect to OpenAI's realtime API\r\n    await client.connect();\r\n\r\n    // Connect to microphone\r\n    await wavRecorder.begin();\r\n\r\n    // Connect to audio output\r\n    await wavStreamPlayer.connect();\r\n\r\n    if (client.getTurnDetectionType() === 'server_vad') {\r\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\r\n    }\r\n  }, []);\r\n\r\n  const changeVoiceType = async () => {\r\n    const client = clientRef.current;\r\n\r\n    /**\r\n    // Access the voice setting from the environment variable\r\n    */\r\n    // Define allowed voices\r\n    const allowedVoices: Array<'shimmer' | 'alloy' | 'echo'> = ['shimmer', 'alloy', 'echo'];\r\n\r\n    // Get voice from environment variable (defaults to 'shimmer' if not set)\r\n    const voice = process.env.REACT_APP_VOICE || 'shimmer';\r\n\r\n    // Validate that the voice is one of the allowed options\r\n    const validVoice = allowedVoices.includes(voice as 'shimmer' | 'alloy' | 'echo')\r\n      ? (voice as 'shimmer' | 'alloy' | 'echo')\r\n      : 'shimmer';  // Default to 'shimmer' if invalid\r\n\r\n    client.updateSession({\r\n      voice: validVoice,\r\n    });\r\n  };\r\n\r\n  // Use useEffect to call the function on component mount\r\n  useEffect(() => {\r\n    changeVoiceType();\r\n  }, []);\r\n\r\n\r\n  /**\r\n   * Disconnect and reset conversation state\r\n   */\r\n  const disconnectConversation = useCallback(async () => {\r\n    setIsConnected(false);\r\n    setRealtimeEvents([]);\r\n    setItems([]);\r\n    setMemoryKv({});\r\n\r\n    const client = clientRef.current;\r\n    client.disconnect();\r\n\r\n    const wavRecorder = wavRecorderRef.current;\r\n    await wavRecorder.end();\r\n\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n    await wavStreamPlayer.interrupt();\r\n\r\n    // Close Simli connection\r\n    if (simliClientRef.current) {\r\n      simliClientRef.current.close();\r\n    }\r\n  }, []);\r\n\r\n  const deleteConversationItem = useCallback(async (id: string) => {\r\n    const client = clientRef.current;\r\n    client.deleteItem(id);\r\n  }, []);\r\n\r\n  /**\r\n   * In push-to-talk mode, start recording\r\n   * .appendInputAudio() for each sample\r\n   */\r\n  const startRecording = async () => {\r\n    setIsRecording(true);\r\n    const client = clientRef.current;\r\n    const wavRecorder = wavRecorderRef.current;\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n    const trackSampleOffset = await wavStreamPlayer.interrupt();\r\n    if (trackSampleOffset?.trackId) {\r\n      const { trackId, offset } = trackSampleOffset;\r\n      await client.cancelResponse(trackId, offset);\r\n    }\r\n    await wavRecorder.record((data) => client.appendInputAudio(data.mono));\r\n  };\r\n\r\n  /**\r\n   * In push-to-talk mode, stop recording\r\n   */\r\n  const stopRecording = async () => {\r\n    setIsRecording(false);\r\n    const client = clientRef.current;\r\n    const wavRecorder = wavRecorderRef.current;\r\n    await wavRecorder.pause();\r\n    client.createResponse();\r\n  };\r\n\r\n  /**\r\n   * Switch between Manual <> VAD mode for communication\r\n   */\r\n  const changeTurnEndType = async (value: string) => {\r\n    const client = clientRef.current;\r\n    const wavRecorder = wavRecorderRef.current;\r\n    if (value === 'none' && wavRecorder.getStatus() === 'recording') {\r\n      await wavRecorder.pause();\r\n    }\r\n    client.updateSession({\r\n      turn_detection: value === 'none' ? null : { type: 'server_vad' },\r\n    });\r\n    if (value === 'server_vad' && client.isConnected()) {\r\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\r\n    }\r\n    setCanPushToTalk(value === 'none');\r\n  };\r\n\r\n  /**\r\n   * Auto-scroll the event logs\r\n   */\r\n  useEffect(() => {\r\n    changeTurnEndType('server_vad');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (eventsScrollRef.current) {\r\n      const eventsEl = eventsScrollRef.current;\r\n      const scrollHeight = eventsEl.scrollHeight;\r\n      // Only scroll if height has just changed\r\n      if (scrollHeight !== eventsScrollHeightRef.current) {\r\n        eventsEl.scrollTop = scrollHeight;\r\n        eventsScrollHeightRef.current = scrollHeight;\r\n      }\r\n    }\r\n  }, [realtimeEvents]);\r\n\r\n  /**\r\n   * Auto-scroll the conversation logs\r\n   */\r\n  useEffect(() => {\r\n    const conversationEls = [].slice.call(\r\n      document.body.querySelectorAll('[data-conversation-content]')\r\n    );\r\n    for (const el of conversationEls) {\r\n      const conversationEl = el as HTMLDivElement;\r\n      conversationEl.scrollTop = conversationEl.scrollHeight;\r\n    }\r\n  }, [items]);\r\n\r\n  /**\r\n   * Set up render loops for the visualization canvas\r\n   */\r\n  useEffect(() => {\r\n    let isLoaded = true;\r\n\r\n    const wavRecorder = wavRecorderRef.current;\r\n    const clientCanvas = clientCanvasRef.current;\r\n    let clientCtx: CanvasRenderingContext2D | null = null;\r\n\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n    const serverCanvas = serverCanvasRef.current;\r\n    let serverCtx: CanvasRenderingContext2D | null = null;\r\n\r\n    const render = () => {\r\n      if (isLoaded) {\r\n        if (clientCanvas) {\r\n          if (!clientCanvas.width || !clientCanvas.height) {\r\n            clientCanvas.width = clientCanvas.offsetWidth;\r\n            clientCanvas.height = clientCanvas.offsetHeight;\r\n          }\r\n          clientCtx = clientCtx || clientCanvas.getContext('2d');\r\n          if (clientCtx) {\r\n            clientCtx.clearRect(0, 0, clientCanvas.width, clientCanvas.height);\r\n            const result = wavRecorder.recording\r\n              ? wavRecorder.getFrequencies('voice')\r\n              : { values: new Float32Array([0]) };\r\n            WavRenderer.drawBars(\r\n              clientCanvas,\r\n              clientCtx,\r\n              result.values,\r\n              '#fcc909',\r\n              10,\r\n              0,\r\n              8\r\n            );\r\n          }\r\n        }\r\n        if (serverCanvas) {\r\n          if (!serverCanvas.width || !serverCanvas.height) {\r\n            serverCanvas.width = serverCanvas.offsetWidth;\r\n            serverCanvas.height = serverCanvas.offsetHeight;\r\n          }\r\n          serverCtx = serverCtx || serverCanvas.getContext('2d');\r\n          if (serverCtx) {\r\n            serverCtx.clearRect(0, 0, serverCanvas.width, serverCanvas.height);\r\n            const result = wavStreamPlayer.analyser\r\n              ? wavStreamPlayer.getFrequencies('voice')\r\n              : { values: new Float32Array([0]) };\r\n            WavRenderer.drawBars(\r\n              serverCanvas,\r\n              serverCtx,\r\n              result.values,\r\n              '#8d8d8d',\r\n              10,\r\n              0,\r\n              8\r\n            );\r\n          }\r\n        }\r\n        window.requestAnimationFrame(render);\r\n      }\r\n    };\r\n    render();\r\n\r\n    return () => {\r\n      isLoaded = false;\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * Core RealtimeClient and audio capture setup\r\n   * Set all of our instructions, tools, events and more\r\n   */\r\n  useEffect(() => {\r\n    // Get refs\r\n    const wavStreamPlayer = wavStreamPlayerRef.current;\r\n    const client = clientRef.current;\r\n\r\n    // Initialize SimliClient\r\n    if (videoRef.current && audioRef.current) {\r\n      const simliApiKey = '7u9k31cjc3350xyfo8tvfq'\r\n      const simliFaceID = \"f7d80f58-d631-4b90-b12f-298b76a72751\";\r\n\r\n      if (!simliApiKey || !simliFaceID) {\r\n        console.error('Simli API key or Face ID is not defined');\r\n      } else {\r\n        const SimliConfig = {\r\n          apiKey: simliApiKey,\r\n          faceID: simliFaceID,\r\n          handleSilence: true,\r\n          videoRef: videoRef,\r\n          audioRef: audioRef,\r\n        };\r\n\r\n        simliClientRef.current = new SimliClient();\r\n        simliClientRef.current.Initialize(SimliConfig);\r\n\r\n        console.log('Simli Client initialized');\r\n      }\r\n    }\r\n\r\n    // Set instructions\r\n    client.updateSession({ instructions: instructions });\r\n    // Set transcription, otherwise we don't get user transcriptions back\r\n    client.updateSession({ input_audio_transcription: { model: 'whisper-1' } });\r\n\r\n    // handle realtime events from client + server for event logging\r\n    client.on('realtime.event', (realtimeEvent: RealtimeEvent) => {\r\n      setRealtimeEvents((realtimeEvents) => {\r\n        const lastEvent = realtimeEvents[realtimeEvents.length - 1];\r\n        if (lastEvent?.event.type === realtimeEvent.event.type) {\r\n          lastEvent.count = (lastEvent.count || 0) + 1;\r\n          return realtimeEvents.slice(0, -1).concat(lastEvent);\r\n        } else {\r\n          return realtimeEvents.concat(realtimeEvent);\r\n        }\r\n      });\r\n    });\r\n    client.on('error', (event: any) => console.error(event));\r\n    client.on('conversation.interrupted', async () => {\r\n      // Stop sending further audio data to Simli\r\n      simliAudioBufferRef.current = [];\r\n\r\n    });\r\n\r\n    client.on('conversation.updated', async ({ item, delta }: any) => {\r\n      const items = client.conversation.getItems();\r\n\r\n      if (delta?.audio) {\r\n        if (simliClientRef.current) {\r\n          const audioData = new Int16Array(delta.audio);\r\n          const resampledAudioData = resampleAudioData(audioData, 24000, 16000);\r\n\r\n          if (isSimliDataChannelOpen()) {\r\n            // Send buffered audio first\r\n            if (simliAudioBufferRef.current.length > 0) {\r\n              simliAudioBufferRef.current.forEach((bufferedData) => {\r\n                simliClientRef.current!.sendAudioData(bufferedData);\r\n              });\r\n              simliAudioBufferRef.current = [];\r\n            }\r\n            // Send current resampled audio data\r\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\r\n            simliClientRef.current.sendAudioData(resampledAudioDataUint8);\r\n          } else {\r\n            // Buffer the resampled audio data\r\n            const resampledAudioDataUint8 = new Uint8Array(resampledAudioData.buffer);\r\n            simliAudioBufferRef.current.push(resampledAudioDataUint8);\r\n            console.warn('Data channel is not open yet, buffering audio data');\r\n          }\r\n        }\r\n      }\r\n\r\n      if (item.status === 'completed' && item.formatted.audio?.length) {\r\n        const wavFile = await WavRecorder.decode(\r\n          item.formatted.audio,\r\n          24000,\r\n          24000\r\n        );\r\n        item.formatted.file = wavFile;\r\n      }\r\n      setItems(items);\r\n    });\r\n\r\n\r\n\r\n    setItems(client.conversation.getItems());\r\n\r\n    return () => {\r\n      // cleanup; resets to defaults\r\n      client.reset();\r\n\r\n      // Close SimliClient on unmount\r\n      if (simliClientRef.current) {\r\n        simliClientRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * Render the application\r\n   */\r\n  return (\r\n    <div data-component=\"ConsolePage\">\r\n      <div className=\"content-top\">\r\n        <div className=\"content-title\">\r\n          <img src=\"https://www.enabel.be/app/uploads/2022/06/enabel-logo-color.svg\" alt=\"Enabel Logo\" style={{ width: '130px', height: '30px' }} />\r\n          {/* <span>realtime console</span> */}\r\n        </div>\r\n        <div className=\"content-api-key\">\r\n          {!LOCAL_RELAY_SERVER_URL && (\r\n            <Button\r\n              icon={Edit}\r\n              iconPosition=\"end\"\r\n              buttonStyle=\"flush\"\r\n              label={`api key: ${apiKey.slice(0, 3)}...`}\r\n              onClick={() => resetAPIKey()}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"content-main\">\r\n        <video\r\n          ref={videoRef}\r\n          autoPlay\r\n          playsInline\r\n          muted\r\n          className=\"video-background\"\r\n        />\r\n        <audio ref={audioRef} autoPlay />\r\n        <div className=\"content-logs\">\r\n          <div className=\"content-block events\">\r\n            <div className=\"visualization\">\r\n              <div className=\"visualization-entry client\">\r\n                <canvas ref={clientCanvasRef} />\r\n              </div>\r\n              <div className=\"visualization-entry server\">\r\n                <canvas ref={serverCanvasRef} />\r\n              </div>\r\n            </div>\r\n            {/* <div className=\"content-block-title\">events</div> */}\r\n            <div className=\"content-block-body\" ref={eventsScrollRef}>\r\n              {showEvents && (\r\n                <>\r\n                  {!realtimeEvents.length && `awaiting connection...`}\r\n                  {realtimeEvents.map((realtimeEvent, i) => {\r\n                    const count = realtimeEvent.count;\r\n                    const event = { ...realtimeEvent.event };\r\n                    if (event.type === 'input_audio_buffer.append') {\r\n                      event.audio = `[trimmed: ${event.audio.length} bytes]`;\r\n                    } else if (event.type === 'response.audio.delta') {\r\n                      event.delta = `[trimmed: ${event.delta.length} bytes]`;\r\n                    }\r\n                    return (\r\n                      <div className=\"event\" key={event.event_id}>\r\n                        <div className=\"event-timestamp\">\r\n                          {formatTime(realtimeEvent.time)}\r\n                        </div>\r\n                        <div className=\"event-details\">\r\n                          <div\r\n                            className=\"event-summary\"\r\n                            onClick={() => {\r\n                              // toggle event details\r\n                              const id = event.event_id;\r\n                              const expanded = { ...expandedEvents };\r\n                              if (expanded[id]) {\r\n                                delete expanded[id];\r\n                              } else {\r\n                                expanded[id] = true;\r\n                              }\r\n                              setExpandedEvents(expanded);\r\n                            }}\r\n                          >\r\n                            <div\r\n                              className={`event-source ${event.type === 'error'\r\n                                ? 'error'\r\n                                : realtimeEvent.source\r\n                                }`}\r\n                            >\r\n                              {realtimeEvent.source === 'client' ? (\r\n                                <ArrowUp />\r\n                              ) : (\r\n                                <ArrowDown />\r\n                              )}\r\n                              <span>\r\n                                {event.type === 'error'\r\n                                  ? 'error!'\r\n                                  : realtimeEvent.source}\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"event-type\">\r\n                              {event.type}\r\n                              {count && ` (${count})`}\r\n                            </div>\r\n                          </div>\r\n                          {!!expandedEvents[event.event_id] && (\r\n                            <div className=\"event-payload\">\r\n                              {JSON.stringify(event, null, 2)}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"content-block conversation\">\r\n            {/* <div className=\"content-block-title\">conversation</div> */}\r\n            <div className=\"content-block-body\" data-conversation-content>\r\n              {showConversations && (\r\n                <>\r\n                  {!items.length && `awaiting connection...`}\r\n                  {items.map((conversationItem, i) => {\r\n                    return (\r\n                      <div className=\"conversation-item\" key={conversationItem.id}>\r\n                        <div className={`speaker ${conversationItem.role || ''}`}>\r\n                          <div>\r\n                            {(\r\n                              conversationItem.role || conversationItem.type\r\n                            ).replaceAll('_', ' ')}\r\n                          </div>\r\n                          <div\r\n                            className=\"close\"\r\n                            onClick={() =>\r\n                              deleteConversationItem(conversationItem.id)\r\n                            }\r\n                          >\r\n                            <X />\r\n                          </div>\r\n                        </div>\r\n                        <div className={`speaker-content`}>\r\n                          {/* tool response */}\r\n                          {conversationItem.type === 'function_call_output' && (\r\n                            <div>{conversationItem.formatted.output}</div>\r\n                          )}\r\n                          {/* tool call */}\r\n                          {!!conversationItem.formatted.tool && (\r\n                            <div>\r\n                              {conversationItem.formatted.tool.name}(\r\n                              {conversationItem.formatted.tool.arguments})\r\n                            </div>\r\n                          )}\r\n                          {!conversationItem.formatted.tool &&\r\n                            conversationItem.role === 'user' && (\r\n                              <div>\r\n                                {conversationItem.formatted.transcript ||\r\n                                  (conversationItem.formatted.audio?.length\r\n                                    ? '(awaiting transcript)'\r\n                                    : conversationItem.formatted.text ||\r\n                                    '(item sent)')}\r\n                              </div>\r\n                            )}\r\n                          {!conversationItem.formatted.tool &&\r\n                            conversationItem.role === 'assistant' && (\r\n                              <div>\r\n                                {conversationItem.formatted.transcript ||\r\n                                  conversationItem.formatted.text ||\r\n                                  '(truncated)'}\r\n                              </div>\r\n                            )}\r\n                          {conversationItem.formatted.file && (\r\n                            <audio\r\n                              src={conversationItem.formatted.file.url}\r\n                              controls\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"content-actions\">\r\n            {/* <Toggle\r\n              defaultValue={false}\r\n              labels={['manual', 'vad']}\r\n              values={['none', 'server_vad']}\r\n              onChange={(_, value) => changeTurnEndType(value)}\r\n            /> */}\r\n            {/* <div className=\"spacer\" /> */}\r\n            {/* {isConnected && canPushToTalk && (\r\n              <Button\r\n                label={isRecording ? 'release to send' : 'push to talk'}\r\n                buttonStyle={isRecording ? 'alert' : 'regular'}\r\n                disabled={!isConnected || !canPushToTalk}\r\n                onMouseDown={startRecording}\r\n                onMouseUp={stopRecording}\r\n              />\r\n            )} */}\r\n            {/* <div className=\"spacer\" /> */}\r\n            <Button\r\n              label={isConnected ? 'disconnect' : 'connect'}\r\n              iconPosition={isConnected ? 'end' : 'start'}\r\n              icon={isConnected ? X : Zap}\r\n              buttonStyle={isConnected ? 'regular' : 'action'}\r\n              onClick={\r\n                isConnected ? disconnectConversation : connectConversation\r\n              }\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"content-right\">\r\n          <div className=\"content-block map\">\r\n            <div className=\"content-block-title\">get_weather()</div>\r\n            <div className=\"content-block-title bottom\">\r\n              {marker?.location || 'not yet retrieved'}\r\n              {!!marker?.temperature && (\r\n                <>\r\n                  <br />\r\n                  🌡️ {marker.temperature.value} {marker.temperature.units}\r\n                </>\r\n              )}\r\n              {!!marker?.wind_speed && (\r\n                <>\r\n                  {' '}\r\n                  🍃 {marker.wind_speed.value} {marker.wind_speed.units}\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"content-block-body full\">\r\n              {coords && (\r\n                <Map\r\n                  center={[coords.lat, coords.lng]}\r\n                  location={coords.location}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"content-block kv\">\r\n            <div className=\"content-block-title\">set_memory()</div>\r\n            <div className=\"content-block-body content-kv\">\r\n              {JSON.stringify(memoryKv, null, 2)}\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}