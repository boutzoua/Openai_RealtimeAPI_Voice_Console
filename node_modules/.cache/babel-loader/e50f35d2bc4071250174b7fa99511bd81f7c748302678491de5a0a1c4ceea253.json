{"ast":null,"code":"const dataMap = new WeakMap();\n\n/**\r\n * Normalizes a Float32Array to Array(m): We use this to draw amplitudes on a graph\r\n * If we're rendering the same audio data, then we'll often be using\r\n * the same (data, m, downsamplePeaks) triplets so we give option to memoize\r\n */\nconst normalizeArray = (data, m, downsamplePeaks = false, memoize = false) => {\n  let cache, mKey, dKey;\n  if (memoize) {\n    mKey = m.toString();\n    dKey = downsamplePeaks.toString();\n    cache = dataMap.has(data) ? dataMap.get(data) : {};\n    dataMap.set(data, cache);\n    cache[mKey] = cache[mKey] || {};\n    if (cache[mKey][dKey]) {\n      return cache[mKey][dKey];\n    }\n  }\n  const n = data.length;\n  const result = new Array(m);\n  if (m <= n) {\n    // Downsampling\n    result.fill(0);\n    const count = new Array(m).fill(0);\n    for (let i = 0; i < n; i++) {\n      const index = Math.floor(i * (m / n));\n      if (downsamplePeaks) {\n        // take highest result in the set\n        result[index] = Math.max(result[index], Math.abs(data[i]));\n      } else {\n        result[index] += Math.abs(data[i]);\n      }\n      count[index]++;\n    }\n    if (!downsamplePeaks) {\n      for (let i = 0; i < result.length; i++) {\n        result[i] = result[i] / count[i];\n      }\n    }\n  } else {\n    for (let i = 0; i < m; i++) {\n      const index = i * (n - 1) / (m - 1);\n      const low = Math.floor(index);\n      const high = Math.ceil(index);\n      const t = index - low;\n      if (high >= n) {\n        result[i] = data[n - 1];\n      } else {\n        result[i] = data[low] * (1 - t) + data[high] * t;\n      }\n    }\n  }\n  if (memoize) {\n    cache[mKey][dKey] = result;\n  }\n  return result;\n};\nexport const WavRenderer = {\n  /**\r\n   * Renders a point-in-time snapshot of an audio sample, usually frequency values\r\n   * @param canvas\r\n   * @param ctx\r\n   * @param data\r\n   * @param color\r\n   * @param pointCount number of bars to render\r\n   * @param barWidth width of bars in px\r\n   * @param barSpacing spacing between bars in px\r\n   * @param center vertically center the bars\r\n   */\n  drawBars: (canvas, ctx, data, color, pointCount = 0, barWidth = 0, barSpacing = 0, center = false) => {\n    pointCount = Math.floor(Math.min(pointCount, (canvas.width - barSpacing) / (Math.max(barWidth, 1) + barSpacing)));\n    if (!pointCount) {\n      pointCount = Math.floor((canvas.width - barSpacing) / (Math.max(barWidth, 1) + barSpacing));\n    }\n    if (!barWidth) {\n      barWidth = (canvas.width - barSpacing) / pointCount - barSpacing;\n    }\n    const points = normalizeArray(data, pointCount, true);\n    for (let i = 0; i < pointCount; i++) {\n      const amplitude = Math.abs(points[i]);\n      const height = Math.max(1, amplitude * canvas.height);\n      const x = barSpacing + i * (barWidth + barSpacing);\n      const y = center ? (canvas.height - height) / 2 : canvas.height - height;\n      ctx.fillStyle = color;\n      ctx.fillRect(x, y, barWidth, height);\n    }\n  }\n};","map":{"version":3,"names":["dataMap","WeakMap","normalizeArray","data","m","downsamplePeaks","memoize","cache","mKey","dKey","toString","has","get","set","n","length","result","Array","fill","count","i","index","Math","floor","max","abs","low","high","ceil","t","WavRenderer","drawBars","canvas","ctx","color","pointCount","barWidth","barSpacing","center","min","width","points","amplitude","height","x","y","fillStyle","fillRect"],"sources":["/Users/smartleet/Desktop/Openai_RealtimeAPI_Voice_Console/src/utils/wav_renderer.ts"],"sourcesContent":["const dataMap = new WeakMap();\r\n\r\n/**\r\n * Normalizes a Float32Array to Array(m): We use this to draw amplitudes on a graph\r\n * If we're rendering the same audio data, then we'll often be using\r\n * the same (data, m, downsamplePeaks) triplets so we give option to memoize\r\n */\r\nconst normalizeArray = (\r\n  data: Float32Array,\r\n  m: number,\r\n  downsamplePeaks: boolean = false,\r\n  memoize: boolean = false\r\n) => {\r\n  let cache, mKey, dKey;\r\n  if (memoize) {\r\n    mKey = m.toString();\r\n    dKey = downsamplePeaks.toString();\r\n    cache = dataMap.has(data) ? dataMap.get(data) : {};\r\n    dataMap.set(data, cache);\r\n    cache[mKey] = cache[mKey] || {};\r\n    if (cache[mKey][dKey]) {\r\n      return cache[mKey][dKey];\r\n    }\r\n  }\r\n  const n = data.length;\r\n  const result = new Array(m);\r\n  if (m <= n) {\r\n    // Downsampling\r\n    result.fill(0);\r\n    const count = new Array(m).fill(0);\r\n    for (let i = 0; i < n; i++) {\r\n      const index = Math.floor(i * (m / n));\r\n      if (downsamplePeaks) {\r\n        // take highest result in the set\r\n        result[index] = Math.max(result[index], Math.abs(data[i]));\r\n      } else {\r\n        result[index] += Math.abs(data[i]);\r\n      }\r\n      count[index]++;\r\n    }\r\n    if (!downsamplePeaks) {\r\n      for (let i = 0; i < result.length; i++) {\r\n        result[i] = result[i] / count[i];\r\n      }\r\n    }\r\n  } else {\r\n    for (let i = 0; i < m; i++) {\r\n      const index = (i * (n - 1)) / (m - 1);\r\n      const low = Math.floor(index);\r\n      const high = Math.ceil(index);\r\n      const t = index - low;\r\n      if (high >= n) {\r\n        result[i] = data[n - 1];\r\n      } else {\r\n        result[i] = data[low] * (1 - t) + data[high] * t;\r\n      }\r\n    }\r\n  }\r\n  if (memoize) {\r\n    cache[mKey as string][dKey as string] = result;\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const WavRenderer = {\r\n  /**\r\n   * Renders a point-in-time snapshot of an audio sample, usually frequency values\r\n   * @param canvas\r\n   * @param ctx\r\n   * @param data\r\n   * @param color\r\n   * @param pointCount number of bars to render\r\n   * @param barWidth width of bars in px\r\n   * @param barSpacing spacing between bars in px\r\n   * @param center vertically center the bars\r\n   */\r\n  drawBars: (\r\n    canvas: HTMLCanvasElement,\r\n    ctx: CanvasRenderingContext2D,\r\n    data: Float32Array,\r\n    color: string,\r\n    pointCount: number = 0,\r\n    barWidth: number = 0,\r\n    barSpacing: number = 0,\r\n    center: boolean = false\r\n  ) => {\r\n    pointCount = Math.floor(\r\n      Math.min(\r\n        pointCount,\r\n        (canvas.width - barSpacing) / (Math.max(barWidth, 1) + barSpacing)\r\n      )\r\n    );\r\n    if (!pointCount) {\r\n      pointCount = Math.floor(\r\n        (canvas.width - barSpacing) / (Math.max(barWidth, 1) + barSpacing)\r\n      );\r\n    }\r\n    if (!barWidth) {\r\n      barWidth = (canvas.width - barSpacing) / pointCount - barSpacing;\r\n    }\r\n    const points = normalizeArray(data, pointCount, true);\r\n    for (let i = 0; i < pointCount; i++) {\r\n      const amplitude = Math.abs(points[i]);\r\n      const height = Math.max(1, amplitude * canvas.height);\r\n      const x = barSpacing + i * (barWidth + barSpacing);\r\n      const y = center ? (canvas.height - height) / 2 : canvas.height - height;\r\n      ctx.fillStyle = color;\r\n      ctx.fillRect(x, y, barWidth, height);\r\n    }\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}